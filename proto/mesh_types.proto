syntax = "proto3";
package spacemesh.v1;
option go_package = "github.com/spacemeshos/api/release/go/spacemesh/v1";

import "types.proto";

message GenesisTimeRequest {}

message GenesisTimeResponse {
    SimpleInt unixtime = 1;
}

message CurrentLayerRequest {}

message CurrentLayerResponse {
    LayerNumber layernum = 1;
}

message CurrentEpochRequest {}

message CurrentEpochResponse {
    SimpleInt epochnum = 1;
}

message NetIDRequest {}

message NetIDResponse {
    SimpleInt netid = 1;
}

message EpochNumLayersRequest {}

message EpochNumLayersResponse {
    SimpleInt numlayers = 1;
}

message LayerDurationRequest {}

message LayerDurationResponse {
    // layer duration, in seconds
    SimpleInt duration = 1;
}

message MaxTransactionsPerSecondRequest {}

message MaxTransactionsPerSecondResponse {
    SimpleInt max_txs_per_second = 1;
}

enum AccountMeshDataFlag {
    ACCOUNT_MESH_DATA_FLAG_UNSPECIFIED = 0;
    ACCOUNT_MESH_DATA_FLAG_TRANSACTIONS = 1;
    ACCOUNT_MESH_DATA_FLAG_ACTIVATIONS = 2;
}

message AccountMeshDataFilter {
    AccountId account_id = 1;
    uint32 account_mesh_data_flags = 2; // A bit field of AccountMeshDataFlags
}

message AccountMeshData {
    oneof datum {
        MeshTransaction mesh_transaction = 1;
        Activation activation = 2;
    }
}

message AccountMeshDataStreamRequest {
    AccountMeshDataFilter filter = 1;
}

message AccountMeshDataStreamResponse {
    AccountMeshData datum = 1;
}

message AccountMeshDataQueryRequest {
    AccountMeshDataFilter filter = 1;
    LayerNumber min_layer = 2; // return data only from this layer or later
    uint32 max_results = 3; // max number of results to return
    uint32 offset = 4; // query offset
}

message AccountMeshDataQueryResponse {
    repeated AccountMeshData data = 1;
    uint32 total_results = 2; // total number of availble results
}

message LayersQueryRequest {
    LayerNumber start_layer = 1;
    LayerNumber end_layer = 2;
}

message LayersQueryResponse {
    repeated Layer layer = 1;
}

message LayerStreamRequest {}

message LayerStreamResponse {
    Layer layer = 1;
}
