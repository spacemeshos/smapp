syntax = "proto3";
package spacemesh.v1;
option go_package = "github.com/spacemeshos/api/release/go/spacemesh/v1";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

message CheckpointStreamRequest {
  uint32 snapshot_layer = 1;
  uint32 num_atxs = 2;
}

message CheckpointStreamResponse {
  bytes data = 1;
}

message RecoverRequest {
  string uri = 1;
  uint32 restore_layer = 2;
}

message Event {
  // time when event occured.
  google.protobuf.Timestamp timestamp = 1;
  // the reason of the failure may be complex to pinpoint.
  // for the first version we want to highlight that failure occured and defer user to logs. 
  bool failure = 2;
  string help = 3;
  oneof details {
    EventBeacon beacon = 4;
    EventInitStart init_start = 5;
    EventInitComplete init_complete = 6;
    EventPostStart post_start = 7;
    EventPostComplete post_complete = 8;
    EventPoetWaitRound poet_wait_round = 9;
    EventPoetWaitProof poet_wait_proof = 10;
    EventAtxPubished atx_published = 11;
    EventEligibilities eligibilities = 12;
    EventProposal proposal = 13;
  }
}

message EventBeacon {
  uint32 epoch = 1;
  bytes beacon = 2;
}

message EventInitStart {
  bytes smesher = 1;
  bytes commitment = 2;
}

message EventInitComplete {}

message EventPostStart {
  bytes challenge = 1;
}

message EventPostComplete {
  bytes challenge = 1;
}

message EventPoetWaitRound {
  uint32 current = 1;
  uint32 publish = 2;
  google.protobuf.Duration wait = 3;
}

message EventPoetWaitProof {
  uint32 publish = 1;
  uint32 target = 2;
  google.protobuf.Duration wait = 3;
}

message EventAtxPubished {
  uint32 current = 1;
  uint32 target = 2;
  bytes id = 3;
  google.protobuf.Duration wait = 4;
}

message EventEligibilities {
  uint32 epoch = 1;
  bytes beacon = 2;
  bytes atx = 3;
  uint32 active_set_size = 4;
  repeated ProposalEligibility eligibilities = 5;
}

message ProposalEligibility {
  uint32 layer = 1;
  uint32 count = 2;
}

// Published proposal. Rewards will be received, once proposal is included into the block.
message EventProposal {
  uint32 layer = 1;
  bytes proposal = 2;
}

message EventStreamRequest {}