syntax = "proto3";
package spacemesh.v1;
option go_package = "github.com/spacemeshos/api/release/go/spacemesh/v1";
import "types.proto";

message AccountState {
    uint64 counter = 1; // aka nonce
    Amount balance = 2; // known account balance
}

message Account {
    AccountId account_id = 1; // account public address
    AccountState state_current = 2; // current state
    AccountState state_projected = 3; // projected state (includes pending txs)
}

// All data items that touch an account (see below note, under the associated
// message)
enum AccountDataFlag {
    ACCOUNT_DATA_FLAG_UNSPECIFIED = 0;
    ACCOUNT_DATA_FLAG_TRANSACTION_RECEIPT = 1; // tx receipt for a tx to or from an account
    ACCOUNT_DATA_FLAG_REWARD = 2; // reward awarded to an account
    ACCOUNT_DATA_FLAG_ACCOUNT = 4; // account data changes (counter or balance)
}

message AccountRequest {
    AccountId account_id = 1;
}

message AccountResponse {
    Account account_wrapper = 1;
}

message AccountDataFilter {
    AccountId account_id = 1;
    uint32 account_data_flags = 2; // bit field of AccountDataFlag
}

message AccountDataStreamRequest {
    AccountDataFilter filter = 1;
}

message AccountDataStreamResponse {
    AccountData datum = 1;
}

message AccountDataQueryRequest {
    AccountDataFilter filter = 1;
    uint32 max_results = 2; // max numbers of results client would like to get
    uint32 offset = 3; // return results from offset
}

message TransactionReceipt {
    TransactionId id = 1; // the source transaction
    enum TransactionResult { // the results of STF transaction processing
        TRANSACTION_RESULT_UNSPECIFIED = 0;
        TRANSACTION_RESULT_EXECUTED = 1; // executed w/o error by the STF
        TRANSACTION_RESULT_BAD_COUNTER = 2; // unexpected transaction counter
        TRANSACTION_RESULT_RUNTIME_EXCEPTION = 3; // app code exception
        TRANSACTION_RESULT_INSUFFICIENT_GAS = 4; // out of gas
        TRANSACTION_RESULT_INSUFFICIENT_FUNDS = 5; // failed due to sender's insufficient funds
    }
    TransactionResult result = 2; // tx processing result
    uint64 gas_used = 3; // gas units used by the transaction
    Amount fee = 4; // transaction fee charged for the transaction (in smidge, gas_price * gas_used)
    LayerNumber layer = 5; // the layer in which the STF processed this transaction
    uint32 index = 6; // the index of the tx in the ordered list of txs to be executed by stf in the layer.
    bytes svm_data = 7; // svm binary data. Decode with svm-codec
}

// All data items that touch an account: receipts for transactions from, or to
// this account, as well as those that modify its state (e.g., token transfers).
// Rewards here includes fees paid. Account contains counter and balance updates.
// Note that this mixes concerns: transactions and rewards are _causes_ of a
// change to account state; nonce and balance updates are _results_.
message AccountData {
    oneof datum {
        Reward reward = 1;
        TransactionReceipt receipt = 2;
        Account account_wrapper = 3;
    }
}

message AccountDataQueryResponse {
    uint32 total_results = 1;
    repeated AccountData account_item = 2;
}

message SmesherRewardStreamRequest {
    SmesherId id = 1;
}

message SmesherRewardStreamResponse {
    Reward reward = 1;
}

message SmesherDataQueryRequest {
    SmesherId smesher_id = 1;
    uint32 max_results = 2; // max numbers of results client would like to get
    uint32 offset = 3; // return results from offset
}

message SmesherDataQueryResponse {
    uint32 total_results = 1;
    repeated Reward rewards = 2;
}

enum GlobalStateDataFlag {
    GLOBAL_STATE_DATA_FLAG_UNSPECIFIED = 0;
    GLOBAL_STATE_DATA_FLAG_TRANSACTION_RECEIPT = 1; // tx receipt generated
    GLOBAL_STATE_DATA_FLAG_REWARD = 2; // reward awarded to an account (includes fees paid)
    GLOBAL_STATE_DATA_FLAG_ACCOUNT = 4; // account data changes (counter or balance)
    GLOBAL_STATE_DATA_FLAG_GLOBAL_STATE_HASH = 8; // hash of global state (i.e., state root)
}

message GlobalStateHash {
    bytes root_hash = 1;
    LayerNumber layer = 2;
}

// For now this is empty but in future we might want to allow this to take a
// layer number.
message GlobalStateHashRequest {}

message GlobalStateHashResponse {
    GlobalStateHash response = 1;
}

message GlobalStateStreamRequest {
    uint32 global_state_data_flags = 1; // bit field of GlobalStateDataFlag
}

message GlobalStateData {
    oneof datum {
        Reward reward = 1;
        TransactionReceipt receipt = 2;
        Account account_wrapper = 3;
        GlobalStateHash global_state = 4;
    }
}

message GlobalStateStreamResponse {
    GlobalStateData datum = 1;
}

message AppEventStreamRequest {}

message AppEventStreamResponse {
    AppEvent event = 1;
}
