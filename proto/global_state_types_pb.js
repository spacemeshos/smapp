/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var types_pb = require('./types_pb.js');
goog.exportSymbol('proto.spacemesh.v1.Account', null, global);
goog.exportSymbol('proto.spacemesh.v1.AccountData', null, global);
goog.exportSymbol('proto.spacemesh.v1.AccountDataFilter', null, global);
goog.exportSymbol('proto.spacemesh.v1.AccountDataFlag', null, global);
goog.exportSymbol('proto.spacemesh.v1.AccountDataQueryRequest', null, global);
goog.exportSymbol('proto.spacemesh.v1.AccountDataQueryResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.AccountDataStreamRequest', null, global);
goog.exportSymbol('proto.spacemesh.v1.AccountDataStreamResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.AccountRequest', null, global);
goog.exportSymbol('proto.spacemesh.v1.AccountResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.AccountState', null, global);
goog.exportSymbol('proto.spacemesh.v1.AppEventStreamRequest', null, global);
goog.exportSymbol('proto.spacemesh.v1.AppEventStreamResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.GlobalStateData', null, global);
goog.exportSymbol('proto.spacemesh.v1.GlobalStateDataFlag', null, global);
goog.exportSymbol('proto.spacemesh.v1.GlobalStateHash', null, global);
goog.exportSymbol('proto.spacemesh.v1.GlobalStateHashRequest', null, global);
goog.exportSymbol('proto.spacemesh.v1.GlobalStateHashResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.GlobalStateStreamRequest', null, global);
goog.exportSymbol('proto.spacemesh.v1.GlobalStateStreamResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.SmesherDataQueryRequest', null, global);
goog.exportSymbol('proto.spacemesh.v1.SmesherDataQueryResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.SmesherRewardStreamRequest', null, global);
goog.exportSymbol('proto.spacemesh.v1.SmesherRewardStreamResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.TransactionReceipt', null, global);
goog.exportSymbol('proto.spacemesh.v1.TransactionReceipt.TransactionResult', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.AccountState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.AccountState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.AccountState.displayName = 'proto.spacemesh.v1.AccountState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.AccountState.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.AccountState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.AccountState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AccountState.toObject = function(includeInstance, msg) {
  var f, obj = {
    counter: jspb.Message.getFieldWithDefault(msg, 1, 0),
    balance: (f = msg.getBalance()) && types_pb.Amount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.AccountState}
 */
proto.spacemesh.v1.AccountState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.AccountState;
  return proto.spacemesh.v1.AccountState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.AccountState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.AccountState}
 */
proto.spacemesh.v1.AccountState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCounter(value);
      break;
    case 2:
      var value = new types_pb.Amount;
      reader.readMessage(value,types_pb.Amount.deserializeBinaryFromReader);
      msg.setBalance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.AccountState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.AccountState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.AccountState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AccountState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCounter();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getBalance();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      types_pb.Amount.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 counter = 1;
 * @return {number}
 */
proto.spacemesh.v1.AccountState.prototype.getCounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.spacemesh.v1.AccountState.prototype.setCounter = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Amount balance = 2;
 * @return {?proto.spacemesh.v1.Amount}
 */
proto.spacemesh.v1.AccountState.prototype.getBalance = function() {
  return /** @type{?proto.spacemesh.v1.Amount} */ (
    jspb.Message.getWrapperField(this, types_pb.Amount, 2));
};


/** @param {?proto.spacemesh.v1.Amount|undefined} value */
proto.spacemesh.v1.AccountState.prototype.setBalance = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.spacemesh.v1.AccountState.prototype.clearBalance = function() {
  this.setBalance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.AccountState.prototype.hasBalance = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.Account = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.Account, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.Account.displayName = 'proto.spacemesh.v1.Account';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.Account.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.Account.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.Account} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Account.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: (f = msg.getAccountId()) && types_pb.AccountId.toObject(includeInstance, f),
    stateCurrent: (f = msg.getStateCurrent()) && proto.spacemesh.v1.AccountState.toObject(includeInstance, f),
    stateProjected: (f = msg.getStateProjected()) && proto.spacemesh.v1.AccountState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.Account}
 */
proto.spacemesh.v1.Account.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.Account;
  return proto.spacemesh.v1.Account.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.Account} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.Account}
 */
proto.spacemesh.v1.Account.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_pb.AccountId;
      reader.readMessage(value,types_pb.AccountId.deserializeBinaryFromReader);
      msg.setAccountId(value);
      break;
    case 2:
      var value = new proto.spacemesh.v1.AccountState;
      reader.readMessage(value,proto.spacemesh.v1.AccountState.deserializeBinaryFromReader);
      msg.setStateCurrent(value);
      break;
    case 3:
      var value = new proto.spacemesh.v1.AccountState;
      reader.readMessage(value,proto.spacemesh.v1.AccountState.deserializeBinaryFromReader);
      msg.setStateProjected(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Account.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.Account.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.Account} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Account.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_pb.AccountId.serializeBinaryToWriter
    );
  }
  f = message.getStateCurrent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.spacemesh.v1.AccountState.serializeBinaryToWriter
    );
  }
  f = message.getStateProjected();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.spacemesh.v1.AccountState.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccountId account_id = 1;
 * @return {?proto.spacemesh.v1.AccountId}
 */
proto.spacemesh.v1.Account.prototype.getAccountId = function() {
  return /** @type{?proto.spacemesh.v1.AccountId} */ (
    jspb.Message.getWrapperField(this, types_pb.AccountId, 1));
};


/** @param {?proto.spacemesh.v1.AccountId|undefined} value */
proto.spacemesh.v1.Account.prototype.setAccountId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.Account.prototype.clearAccountId = function() {
  this.setAccountId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.Account.prototype.hasAccountId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AccountState state_current = 2;
 * @return {?proto.spacemesh.v1.AccountState}
 */
proto.spacemesh.v1.Account.prototype.getStateCurrent = function() {
  return /** @type{?proto.spacemesh.v1.AccountState} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.AccountState, 2));
};


/** @param {?proto.spacemesh.v1.AccountState|undefined} value */
proto.spacemesh.v1.Account.prototype.setStateCurrent = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.spacemesh.v1.Account.prototype.clearStateCurrent = function() {
  this.setStateCurrent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.Account.prototype.hasStateCurrent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AccountState state_projected = 3;
 * @return {?proto.spacemesh.v1.AccountState}
 */
proto.spacemesh.v1.Account.prototype.getStateProjected = function() {
  return /** @type{?proto.spacemesh.v1.AccountState} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.AccountState, 3));
};


/** @param {?proto.spacemesh.v1.AccountState|undefined} value */
proto.spacemesh.v1.Account.prototype.setStateProjected = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.spacemesh.v1.Account.prototype.clearStateProjected = function() {
  this.setStateProjected(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.Account.prototype.hasStateProjected = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.AccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.AccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.AccountRequest.displayName = 'proto.spacemesh.v1.AccountRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.AccountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.AccountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.AccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AccountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: (f = msg.getAccountId()) && types_pb.AccountId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.AccountRequest}
 */
proto.spacemesh.v1.AccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.AccountRequest;
  return proto.spacemesh.v1.AccountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.AccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.AccountRequest}
 */
proto.spacemesh.v1.AccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_pb.AccountId;
      reader.readMessage(value,types_pb.AccountId.deserializeBinaryFromReader);
      msg.setAccountId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.AccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.AccountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.AccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_pb.AccountId.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccountId account_id = 1;
 * @return {?proto.spacemesh.v1.AccountId}
 */
proto.spacemesh.v1.AccountRequest.prototype.getAccountId = function() {
  return /** @type{?proto.spacemesh.v1.AccountId} */ (
    jspb.Message.getWrapperField(this, types_pb.AccountId, 1));
};


/** @param {?proto.spacemesh.v1.AccountId|undefined} value */
proto.spacemesh.v1.AccountRequest.prototype.setAccountId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.AccountRequest.prototype.clearAccountId = function() {
  this.setAccountId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.AccountRequest.prototype.hasAccountId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.AccountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.AccountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.AccountResponse.displayName = 'proto.spacemesh.v1.AccountResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.AccountResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.AccountResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.AccountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AccountResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountWrapper: (f = msg.getAccountWrapper()) && proto.spacemesh.v1.Account.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.AccountResponse}
 */
proto.spacemesh.v1.AccountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.AccountResponse;
  return proto.spacemesh.v1.AccountResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.AccountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.AccountResponse}
 */
proto.spacemesh.v1.AccountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spacemesh.v1.Account;
      reader.readMessage(value,proto.spacemesh.v1.Account.deserializeBinaryFromReader);
      msg.setAccountWrapper(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.AccountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.AccountResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.AccountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AccountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountWrapper();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.spacemesh.v1.Account.serializeBinaryToWriter
    );
  }
};


/**
 * optional Account account_wrapper = 1;
 * @return {?proto.spacemesh.v1.Account}
 */
proto.spacemesh.v1.AccountResponse.prototype.getAccountWrapper = function() {
  return /** @type{?proto.spacemesh.v1.Account} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.Account, 1));
};


/** @param {?proto.spacemesh.v1.Account|undefined} value */
proto.spacemesh.v1.AccountResponse.prototype.setAccountWrapper = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.AccountResponse.prototype.clearAccountWrapper = function() {
  this.setAccountWrapper(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.AccountResponse.prototype.hasAccountWrapper = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.AccountDataFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.AccountDataFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.AccountDataFilter.displayName = 'proto.spacemesh.v1.AccountDataFilter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.AccountDataFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.AccountDataFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.AccountDataFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AccountDataFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: (f = msg.getAccountId()) && types_pb.AccountId.toObject(includeInstance, f),
    accountDataFlags: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.AccountDataFilter}
 */
proto.spacemesh.v1.AccountDataFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.AccountDataFilter;
  return proto.spacemesh.v1.AccountDataFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.AccountDataFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.AccountDataFilter}
 */
proto.spacemesh.v1.AccountDataFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_pb.AccountId;
      reader.readMessage(value,types_pb.AccountId.deserializeBinaryFromReader);
      msg.setAccountId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAccountDataFlags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.AccountDataFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.AccountDataFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.AccountDataFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AccountDataFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_pb.AccountId.serializeBinaryToWriter
    );
  }
  f = message.getAccountDataFlags();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional AccountId account_id = 1;
 * @return {?proto.spacemesh.v1.AccountId}
 */
proto.spacemesh.v1.AccountDataFilter.prototype.getAccountId = function() {
  return /** @type{?proto.spacemesh.v1.AccountId} */ (
    jspb.Message.getWrapperField(this, types_pb.AccountId, 1));
};


/** @param {?proto.spacemesh.v1.AccountId|undefined} value */
proto.spacemesh.v1.AccountDataFilter.prototype.setAccountId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.AccountDataFilter.prototype.clearAccountId = function() {
  this.setAccountId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.AccountDataFilter.prototype.hasAccountId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 account_data_flags = 2;
 * @return {number}
 */
proto.spacemesh.v1.AccountDataFilter.prototype.getAccountDataFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.spacemesh.v1.AccountDataFilter.prototype.setAccountDataFlags = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.AccountDataStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.AccountDataStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.AccountDataStreamRequest.displayName = 'proto.spacemesh.v1.AccountDataStreamRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.AccountDataStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.AccountDataStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.AccountDataStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AccountDataStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    filter: (f = msg.getFilter()) && proto.spacemesh.v1.AccountDataFilter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.AccountDataStreamRequest}
 */
proto.spacemesh.v1.AccountDataStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.AccountDataStreamRequest;
  return proto.spacemesh.v1.AccountDataStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.AccountDataStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.AccountDataStreamRequest}
 */
proto.spacemesh.v1.AccountDataStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spacemesh.v1.AccountDataFilter;
      reader.readMessage(value,proto.spacemesh.v1.AccountDataFilter.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.AccountDataStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.AccountDataStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.AccountDataStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AccountDataStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.spacemesh.v1.AccountDataFilter.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccountDataFilter filter = 1;
 * @return {?proto.spacemesh.v1.AccountDataFilter}
 */
proto.spacemesh.v1.AccountDataStreamRequest.prototype.getFilter = function() {
  return /** @type{?proto.spacemesh.v1.AccountDataFilter} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.AccountDataFilter, 1));
};


/** @param {?proto.spacemesh.v1.AccountDataFilter|undefined} value */
proto.spacemesh.v1.AccountDataStreamRequest.prototype.setFilter = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.AccountDataStreamRequest.prototype.clearFilter = function() {
  this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.AccountDataStreamRequest.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.AccountDataStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.AccountDataStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.AccountDataStreamResponse.displayName = 'proto.spacemesh.v1.AccountDataStreamResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.AccountDataStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.AccountDataStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.AccountDataStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AccountDataStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    datum: (f = msg.getDatum()) && proto.spacemesh.v1.AccountData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.AccountDataStreamResponse}
 */
proto.spacemesh.v1.AccountDataStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.AccountDataStreamResponse;
  return proto.spacemesh.v1.AccountDataStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.AccountDataStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.AccountDataStreamResponse}
 */
proto.spacemesh.v1.AccountDataStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spacemesh.v1.AccountData;
      reader.readMessage(value,proto.spacemesh.v1.AccountData.deserializeBinaryFromReader);
      msg.setDatum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.AccountDataStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.AccountDataStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.AccountDataStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AccountDataStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatum();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.spacemesh.v1.AccountData.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccountData datum = 1;
 * @return {?proto.spacemesh.v1.AccountData}
 */
proto.spacemesh.v1.AccountDataStreamResponse.prototype.getDatum = function() {
  return /** @type{?proto.spacemesh.v1.AccountData} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.AccountData, 1));
};


/** @param {?proto.spacemesh.v1.AccountData|undefined} value */
proto.spacemesh.v1.AccountDataStreamResponse.prototype.setDatum = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.AccountDataStreamResponse.prototype.clearDatum = function() {
  this.setDatum(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.AccountDataStreamResponse.prototype.hasDatum = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.AccountDataQueryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.AccountDataQueryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.AccountDataQueryRequest.displayName = 'proto.spacemesh.v1.AccountDataQueryRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.AccountDataQueryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.AccountDataQueryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.AccountDataQueryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AccountDataQueryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    filter: (f = msg.getFilter()) && proto.spacemesh.v1.AccountDataFilter.toObject(includeInstance, f),
    maxResults: jspb.Message.getFieldWithDefault(msg, 2, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.AccountDataQueryRequest}
 */
proto.spacemesh.v1.AccountDataQueryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.AccountDataQueryRequest;
  return proto.spacemesh.v1.AccountDataQueryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.AccountDataQueryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.AccountDataQueryRequest}
 */
proto.spacemesh.v1.AccountDataQueryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spacemesh.v1.AccountDataFilter;
      reader.readMessage(value,proto.spacemesh.v1.AccountDataFilter.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxResults(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.AccountDataQueryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.AccountDataQueryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.AccountDataQueryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AccountDataQueryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.spacemesh.v1.AccountDataFilter.serializeBinaryToWriter
    );
  }
  f = message.getMaxResults();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional AccountDataFilter filter = 1;
 * @return {?proto.spacemesh.v1.AccountDataFilter}
 */
proto.spacemesh.v1.AccountDataQueryRequest.prototype.getFilter = function() {
  return /** @type{?proto.spacemesh.v1.AccountDataFilter} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.AccountDataFilter, 1));
};


/** @param {?proto.spacemesh.v1.AccountDataFilter|undefined} value */
proto.spacemesh.v1.AccountDataQueryRequest.prototype.setFilter = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.AccountDataQueryRequest.prototype.clearFilter = function() {
  this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.AccountDataQueryRequest.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 max_results = 2;
 * @return {number}
 */
proto.spacemesh.v1.AccountDataQueryRequest.prototype.getMaxResults = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.spacemesh.v1.AccountDataQueryRequest.prototype.setMaxResults = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 offset = 3;
 * @return {number}
 */
proto.spacemesh.v1.AccountDataQueryRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.spacemesh.v1.AccountDataQueryRequest.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.TransactionReceipt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.TransactionReceipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.TransactionReceipt.displayName = 'proto.spacemesh.v1.TransactionReceipt';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.TransactionReceipt.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.TransactionReceipt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.TransactionReceipt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.TransactionReceipt.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && types_pb.TransactionId.toObject(includeInstance, f),
    result: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gasUsed: jspb.Message.getFieldWithDefault(msg, 3, 0),
    fee: (f = msg.getFee()) && types_pb.Amount.toObject(includeInstance, f),
    layer: (f = msg.getLayer()) && types_pb.LayerNumber.toObject(includeInstance, f),
    index: jspb.Message.getFieldWithDefault(msg, 6, 0),
    svmData: msg.getSvmData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.TransactionReceipt}
 */
proto.spacemesh.v1.TransactionReceipt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.TransactionReceipt;
  return proto.spacemesh.v1.TransactionReceipt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.TransactionReceipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.TransactionReceipt}
 */
proto.spacemesh.v1.TransactionReceipt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_pb.TransactionId;
      reader.readMessage(value,types_pb.TransactionId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.spacemesh.v1.TransactionReceipt.TransactionResult} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasUsed(value);
      break;
    case 4:
      var value = new types_pb.Amount;
      reader.readMessage(value,types_pb.Amount.deserializeBinaryFromReader);
      msg.setFee(value);
      break;
    case 5:
      var value = new types_pb.LayerNumber;
      reader.readMessage(value,types_pb.LayerNumber.deserializeBinaryFromReader);
      msg.setLayer(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSvmData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.TransactionReceipt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.TransactionReceipt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.TransactionReceipt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.TransactionReceipt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_pb.TransactionId.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getGasUsed();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getFee();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      types_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getLayer();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      types_pb.LayerNumber.serializeBinaryToWriter
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getSvmData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.spacemesh.v1.TransactionReceipt.TransactionResult = {
  TRANSACTION_RESULT_UNSPECIFIED: 0,
  TRANSACTION_RESULT_EXECUTED: 1,
  TRANSACTION_RESULT_BAD_COUNTER: 2,
  TRANSACTION_RESULT_RUNTIME_EXCEPTION: 3,
  TRANSACTION_RESULT_INSUFFICIENT_GAS: 4,
  TRANSACTION_RESULT_INSUFFICIENT_FUNDS: 5
};

/**
 * optional TransactionId id = 1;
 * @return {?proto.spacemesh.v1.TransactionId}
 */
proto.spacemesh.v1.TransactionReceipt.prototype.getId = function() {
  return /** @type{?proto.spacemesh.v1.TransactionId} */ (
    jspb.Message.getWrapperField(this, types_pb.TransactionId, 1));
};


/** @param {?proto.spacemesh.v1.TransactionId|undefined} value */
proto.spacemesh.v1.TransactionReceipt.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.TransactionReceipt.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.TransactionReceipt.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TransactionResult result = 2;
 * @return {!proto.spacemesh.v1.TransactionReceipt.TransactionResult}
 */
proto.spacemesh.v1.TransactionReceipt.prototype.getResult = function() {
  return /** @type {!proto.spacemesh.v1.TransactionReceipt.TransactionResult} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.spacemesh.v1.TransactionReceipt.TransactionResult} value */
proto.spacemesh.v1.TransactionReceipt.prototype.setResult = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint64 gas_used = 3;
 * @return {number}
 */
proto.spacemesh.v1.TransactionReceipt.prototype.getGasUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.spacemesh.v1.TransactionReceipt.prototype.setGasUsed = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Amount fee = 4;
 * @return {?proto.spacemesh.v1.Amount}
 */
proto.spacemesh.v1.TransactionReceipt.prototype.getFee = function() {
  return /** @type{?proto.spacemesh.v1.Amount} */ (
    jspb.Message.getWrapperField(this, types_pb.Amount, 4));
};


/** @param {?proto.spacemesh.v1.Amount|undefined} value */
proto.spacemesh.v1.TransactionReceipt.prototype.setFee = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.spacemesh.v1.TransactionReceipt.prototype.clearFee = function() {
  this.setFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.TransactionReceipt.prototype.hasFee = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional LayerNumber layer = 5;
 * @return {?proto.spacemesh.v1.LayerNumber}
 */
proto.spacemesh.v1.TransactionReceipt.prototype.getLayer = function() {
  return /** @type{?proto.spacemesh.v1.LayerNumber} */ (
    jspb.Message.getWrapperField(this, types_pb.LayerNumber, 5));
};


/** @param {?proto.spacemesh.v1.LayerNumber|undefined} value */
proto.spacemesh.v1.TransactionReceipt.prototype.setLayer = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.spacemesh.v1.TransactionReceipt.prototype.clearLayer = function() {
  this.setLayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.TransactionReceipt.prototype.hasLayer = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 index = 6;
 * @return {number}
 */
proto.spacemesh.v1.TransactionReceipt.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.spacemesh.v1.TransactionReceipt.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bytes svm_data = 7;
 * @return {!(string|Uint8Array)}
 */
proto.spacemesh.v1.TransactionReceipt.prototype.getSvmData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes svm_data = 7;
 * This is a type-conversion wrapper around `getSvmData()`
 * @return {string}
 */
proto.spacemesh.v1.TransactionReceipt.prototype.getSvmData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSvmData()));
};


/**
 * optional bytes svm_data = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSvmData()`
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.TransactionReceipt.prototype.getSvmData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSvmData()));
};


/** @param {!(string|Uint8Array)} value */
proto.spacemesh.v1.TransactionReceipt.prototype.setSvmData = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.AccountData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.spacemesh.v1.AccountData.oneofGroups_);
};
goog.inherits(proto.spacemesh.v1.AccountData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.AccountData.displayName = 'proto.spacemesh.v1.AccountData';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.spacemesh.v1.AccountData.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.spacemesh.v1.AccountData.DatumCase = {
  DATUM_NOT_SET: 0,
  REWARD: 1,
  RECEIPT: 2,
  ACCOUNT_WRAPPER: 3
};

/**
 * @return {proto.spacemesh.v1.AccountData.DatumCase}
 */
proto.spacemesh.v1.AccountData.prototype.getDatumCase = function() {
  return /** @type {proto.spacemesh.v1.AccountData.DatumCase} */(jspb.Message.computeOneofCase(this, proto.spacemesh.v1.AccountData.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.AccountData.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.AccountData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.AccountData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AccountData.toObject = function(includeInstance, msg) {
  var f, obj = {
    reward: (f = msg.getReward()) && types_pb.Reward.toObject(includeInstance, f),
    receipt: (f = msg.getReceipt()) && proto.spacemesh.v1.TransactionReceipt.toObject(includeInstance, f),
    accountWrapper: (f = msg.getAccountWrapper()) && proto.spacemesh.v1.Account.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.AccountData}
 */
proto.spacemesh.v1.AccountData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.AccountData;
  return proto.spacemesh.v1.AccountData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.AccountData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.AccountData}
 */
proto.spacemesh.v1.AccountData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_pb.Reward;
      reader.readMessage(value,types_pb.Reward.deserializeBinaryFromReader);
      msg.setReward(value);
      break;
    case 2:
      var value = new proto.spacemesh.v1.TransactionReceipt;
      reader.readMessage(value,proto.spacemesh.v1.TransactionReceipt.deserializeBinaryFromReader);
      msg.setReceipt(value);
      break;
    case 3:
      var value = new proto.spacemesh.v1.Account;
      reader.readMessage(value,proto.spacemesh.v1.Account.deserializeBinaryFromReader);
      msg.setAccountWrapper(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.AccountData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.AccountData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.AccountData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AccountData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReward();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_pb.Reward.serializeBinaryToWriter
    );
  }
  f = message.getReceipt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.spacemesh.v1.TransactionReceipt.serializeBinaryToWriter
    );
  }
  f = message.getAccountWrapper();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.spacemesh.v1.Account.serializeBinaryToWriter
    );
  }
};


/**
 * optional Reward reward = 1;
 * @return {?proto.spacemesh.v1.Reward}
 */
proto.spacemesh.v1.AccountData.prototype.getReward = function() {
  return /** @type{?proto.spacemesh.v1.Reward} */ (
    jspb.Message.getWrapperField(this, types_pb.Reward, 1));
};


/** @param {?proto.spacemesh.v1.Reward|undefined} value */
proto.spacemesh.v1.AccountData.prototype.setReward = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.spacemesh.v1.AccountData.oneofGroups_[0], value);
};


proto.spacemesh.v1.AccountData.prototype.clearReward = function() {
  this.setReward(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.AccountData.prototype.hasReward = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TransactionReceipt receipt = 2;
 * @return {?proto.spacemesh.v1.TransactionReceipt}
 */
proto.spacemesh.v1.AccountData.prototype.getReceipt = function() {
  return /** @type{?proto.spacemesh.v1.TransactionReceipt} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.TransactionReceipt, 2));
};


/** @param {?proto.spacemesh.v1.TransactionReceipt|undefined} value */
proto.spacemesh.v1.AccountData.prototype.setReceipt = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.spacemesh.v1.AccountData.oneofGroups_[0], value);
};


proto.spacemesh.v1.AccountData.prototype.clearReceipt = function() {
  this.setReceipt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.AccountData.prototype.hasReceipt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Account account_wrapper = 3;
 * @return {?proto.spacemesh.v1.Account}
 */
proto.spacemesh.v1.AccountData.prototype.getAccountWrapper = function() {
  return /** @type{?proto.spacemesh.v1.Account} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.Account, 3));
};


/** @param {?proto.spacemesh.v1.Account|undefined} value */
proto.spacemesh.v1.AccountData.prototype.setAccountWrapper = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.spacemesh.v1.AccountData.oneofGroups_[0], value);
};


proto.spacemesh.v1.AccountData.prototype.clearAccountWrapper = function() {
  this.setAccountWrapper(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.AccountData.prototype.hasAccountWrapper = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.AccountDataQueryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.spacemesh.v1.AccountDataQueryResponse.repeatedFields_, null);
};
goog.inherits(proto.spacemesh.v1.AccountDataQueryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.AccountDataQueryResponse.displayName = 'proto.spacemesh.v1.AccountDataQueryResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.spacemesh.v1.AccountDataQueryResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.AccountDataQueryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.AccountDataQueryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.AccountDataQueryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AccountDataQueryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalResults: jspb.Message.getFieldWithDefault(msg, 1, 0),
    accountItemList: jspb.Message.toObjectList(msg.getAccountItemList(),
    proto.spacemesh.v1.AccountData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.AccountDataQueryResponse}
 */
proto.spacemesh.v1.AccountDataQueryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.AccountDataQueryResponse;
  return proto.spacemesh.v1.AccountDataQueryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.AccountDataQueryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.AccountDataQueryResponse}
 */
proto.spacemesh.v1.AccountDataQueryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalResults(value);
      break;
    case 2:
      var value = new proto.spacemesh.v1.AccountData;
      reader.readMessage(value,proto.spacemesh.v1.AccountData.deserializeBinaryFromReader);
      msg.addAccountItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.AccountDataQueryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.AccountDataQueryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.AccountDataQueryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AccountDataQueryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalResults();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAccountItemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.spacemesh.v1.AccountData.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 total_results = 1;
 * @return {number}
 */
proto.spacemesh.v1.AccountDataQueryResponse.prototype.getTotalResults = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.spacemesh.v1.AccountDataQueryResponse.prototype.setTotalResults = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated AccountData account_item = 2;
 * @return {!Array<!proto.spacemesh.v1.AccountData>}
 */
proto.spacemesh.v1.AccountDataQueryResponse.prototype.getAccountItemList = function() {
  return /** @type{!Array<!proto.spacemesh.v1.AccountData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.spacemesh.v1.AccountData, 2));
};


/** @param {!Array<!proto.spacemesh.v1.AccountData>} value */
proto.spacemesh.v1.AccountDataQueryResponse.prototype.setAccountItemList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.spacemesh.v1.AccountData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.spacemesh.v1.AccountData}
 */
proto.spacemesh.v1.AccountDataQueryResponse.prototype.addAccountItem = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.spacemesh.v1.AccountData, opt_index);
};


proto.spacemesh.v1.AccountDataQueryResponse.prototype.clearAccountItemList = function() {
  this.setAccountItemList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.SmesherRewardStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.SmesherRewardStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.SmesherRewardStreamRequest.displayName = 'proto.spacemesh.v1.SmesherRewardStreamRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.SmesherRewardStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.SmesherRewardStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.SmesherRewardStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SmesherRewardStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && types_pb.SmesherId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.SmesherRewardStreamRequest}
 */
proto.spacemesh.v1.SmesherRewardStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.SmesherRewardStreamRequest;
  return proto.spacemesh.v1.SmesherRewardStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.SmesherRewardStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.SmesherRewardStreamRequest}
 */
proto.spacemesh.v1.SmesherRewardStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_pb.SmesherId;
      reader.readMessage(value,types_pb.SmesherId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.SmesherRewardStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.SmesherRewardStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.SmesherRewardStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SmesherRewardStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_pb.SmesherId.serializeBinaryToWriter
    );
  }
};


/**
 * optional SmesherId id = 1;
 * @return {?proto.spacemesh.v1.SmesherId}
 */
proto.spacemesh.v1.SmesherRewardStreamRequest.prototype.getId = function() {
  return /** @type{?proto.spacemesh.v1.SmesherId} */ (
    jspb.Message.getWrapperField(this, types_pb.SmesherId, 1));
};


/** @param {?proto.spacemesh.v1.SmesherId|undefined} value */
proto.spacemesh.v1.SmesherRewardStreamRequest.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.SmesherRewardStreamRequest.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.SmesherRewardStreamRequest.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.SmesherRewardStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.SmesherRewardStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.SmesherRewardStreamResponse.displayName = 'proto.spacemesh.v1.SmesherRewardStreamResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.SmesherRewardStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.SmesherRewardStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.SmesherRewardStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SmesherRewardStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    reward: (f = msg.getReward()) && types_pb.Reward.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.SmesherRewardStreamResponse}
 */
proto.spacemesh.v1.SmesherRewardStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.SmesherRewardStreamResponse;
  return proto.spacemesh.v1.SmesherRewardStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.SmesherRewardStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.SmesherRewardStreamResponse}
 */
proto.spacemesh.v1.SmesherRewardStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_pb.Reward;
      reader.readMessage(value,types_pb.Reward.deserializeBinaryFromReader);
      msg.setReward(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.SmesherRewardStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.SmesherRewardStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.SmesherRewardStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SmesherRewardStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReward();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_pb.Reward.serializeBinaryToWriter
    );
  }
};


/**
 * optional Reward reward = 1;
 * @return {?proto.spacemesh.v1.Reward}
 */
proto.spacemesh.v1.SmesherRewardStreamResponse.prototype.getReward = function() {
  return /** @type{?proto.spacemesh.v1.Reward} */ (
    jspb.Message.getWrapperField(this, types_pb.Reward, 1));
};


/** @param {?proto.spacemesh.v1.Reward|undefined} value */
proto.spacemesh.v1.SmesherRewardStreamResponse.prototype.setReward = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.SmesherRewardStreamResponse.prototype.clearReward = function() {
  this.setReward(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.SmesherRewardStreamResponse.prototype.hasReward = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.SmesherDataQueryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.SmesherDataQueryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.SmesherDataQueryRequest.displayName = 'proto.spacemesh.v1.SmesherDataQueryRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.SmesherDataQueryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.SmesherDataQueryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.SmesherDataQueryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SmesherDataQueryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    smesherId: (f = msg.getSmesherId()) && types_pb.SmesherId.toObject(includeInstance, f),
    maxResults: jspb.Message.getFieldWithDefault(msg, 2, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.SmesherDataQueryRequest}
 */
proto.spacemesh.v1.SmesherDataQueryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.SmesherDataQueryRequest;
  return proto.spacemesh.v1.SmesherDataQueryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.SmesherDataQueryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.SmesherDataQueryRequest}
 */
proto.spacemesh.v1.SmesherDataQueryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_pb.SmesherId;
      reader.readMessage(value,types_pb.SmesherId.deserializeBinaryFromReader);
      msg.setSmesherId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxResults(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.SmesherDataQueryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.SmesherDataQueryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.SmesherDataQueryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SmesherDataQueryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSmesherId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_pb.SmesherId.serializeBinaryToWriter
    );
  }
  f = message.getMaxResults();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional SmesherId smesher_id = 1;
 * @return {?proto.spacemesh.v1.SmesherId}
 */
proto.spacemesh.v1.SmesherDataQueryRequest.prototype.getSmesherId = function() {
  return /** @type{?proto.spacemesh.v1.SmesherId} */ (
    jspb.Message.getWrapperField(this, types_pb.SmesherId, 1));
};


/** @param {?proto.spacemesh.v1.SmesherId|undefined} value */
proto.spacemesh.v1.SmesherDataQueryRequest.prototype.setSmesherId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.SmesherDataQueryRequest.prototype.clearSmesherId = function() {
  this.setSmesherId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.SmesherDataQueryRequest.prototype.hasSmesherId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 max_results = 2;
 * @return {number}
 */
proto.spacemesh.v1.SmesherDataQueryRequest.prototype.getMaxResults = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.spacemesh.v1.SmesherDataQueryRequest.prototype.setMaxResults = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 offset = 3;
 * @return {number}
 */
proto.spacemesh.v1.SmesherDataQueryRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.spacemesh.v1.SmesherDataQueryRequest.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.SmesherDataQueryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.spacemesh.v1.SmesherDataQueryResponse.repeatedFields_, null);
};
goog.inherits(proto.spacemesh.v1.SmesherDataQueryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.SmesherDataQueryResponse.displayName = 'proto.spacemesh.v1.SmesherDataQueryResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.spacemesh.v1.SmesherDataQueryResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.SmesherDataQueryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.SmesherDataQueryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.SmesherDataQueryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SmesherDataQueryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalResults: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rewardsList: jspb.Message.toObjectList(msg.getRewardsList(),
    types_pb.Reward.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.SmesherDataQueryResponse}
 */
proto.spacemesh.v1.SmesherDataQueryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.SmesherDataQueryResponse;
  return proto.spacemesh.v1.SmesherDataQueryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.SmesherDataQueryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.SmesherDataQueryResponse}
 */
proto.spacemesh.v1.SmesherDataQueryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalResults(value);
      break;
    case 2:
      var value = new types_pb.Reward;
      reader.readMessage(value,types_pb.Reward.deserializeBinaryFromReader);
      msg.addRewards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.SmesherDataQueryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.SmesherDataQueryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.SmesherDataQueryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SmesherDataQueryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalResults();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getRewardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      types_pb.Reward.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 total_results = 1;
 * @return {number}
 */
proto.spacemesh.v1.SmesherDataQueryResponse.prototype.getTotalResults = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.spacemesh.v1.SmesherDataQueryResponse.prototype.setTotalResults = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Reward rewards = 2;
 * @return {!Array<!proto.spacemesh.v1.Reward>}
 */
proto.spacemesh.v1.SmesherDataQueryResponse.prototype.getRewardsList = function() {
  return /** @type{!Array<!proto.spacemesh.v1.Reward>} */ (
    jspb.Message.getRepeatedWrapperField(this, types_pb.Reward, 2));
};


/** @param {!Array<!proto.spacemesh.v1.Reward>} value */
proto.spacemesh.v1.SmesherDataQueryResponse.prototype.setRewardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.spacemesh.v1.Reward=} opt_value
 * @param {number=} opt_index
 * @return {!proto.spacemesh.v1.Reward}
 */
proto.spacemesh.v1.SmesherDataQueryResponse.prototype.addRewards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.spacemesh.v1.Reward, opt_index);
};


proto.spacemesh.v1.SmesherDataQueryResponse.prototype.clearRewardsList = function() {
  this.setRewardsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.GlobalStateHash = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.GlobalStateHash, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.GlobalStateHash.displayName = 'proto.spacemesh.v1.GlobalStateHash';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.GlobalStateHash.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.GlobalStateHash.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.GlobalStateHash} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.GlobalStateHash.toObject = function(includeInstance, msg) {
  var f, obj = {
    rootHash: msg.getRootHash_asB64(),
    layer: (f = msg.getLayer()) && types_pb.LayerNumber.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.GlobalStateHash}
 */
proto.spacemesh.v1.GlobalStateHash.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.GlobalStateHash;
  return proto.spacemesh.v1.GlobalStateHash.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.GlobalStateHash} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.GlobalStateHash}
 */
proto.spacemesh.v1.GlobalStateHash.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRootHash(value);
      break;
    case 2:
      var value = new types_pb.LayerNumber;
      reader.readMessage(value,types_pb.LayerNumber.deserializeBinaryFromReader);
      msg.setLayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.GlobalStateHash.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.GlobalStateHash.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.GlobalStateHash} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.GlobalStateHash.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRootHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getLayer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      types_pb.LayerNumber.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes root_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.spacemesh.v1.GlobalStateHash.prototype.getRootHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes root_hash = 1;
 * This is a type-conversion wrapper around `getRootHash()`
 * @return {string}
 */
proto.spacemesh.v1.GlobalStateHash.prototype.getRootHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRootHash()));
};


/**
 * optional bytes root_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRootHash()`
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.GlobalStateHash.prototype.getRootHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRootHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.spacemesh.v1.GlobalStateHash.prototype.setRootHash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional LayerNumber layer = 2;
 * @return {?proto.spacemesh.v1.LayerNumber}
 */
proto.spacemesh.v1.GlobalStateHash.prototype.getLayer = function() {
  return /** @type{?proto.spacemesh.v1.LayerNumber} */ (
    jspb.Message.getWrapperField(this, types_pb.LayerNumber, 2));
};


/** @param {?proto.spacemesh.v1.LayerNumber|undefined} value */
proto.spacemesh.v1.GlobalStateHash.prototype.setLayer = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.spacemesh.v1.GlobalStateHash.prototype.clearLayer = function() {
  this.setLayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.GlobalStateHash.prototype.hasLayer = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.GlobalStateHashRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.GlobalStateHashRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.GlobalStateHashRequest.displayName = 'proto.spacemesh.v1.GlobalStateHashRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.GlobalStateHashRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.GlobalStateHashRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.GlobalStateHashRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.GlobalStateHashRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.GlobalStateHashRequest}
 */
proto.spacemesh.v1.GlobalStateHashRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.GlobalStateHashRequest;
  return proto.spacemesh.v1.GlobalStateHashRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.GlobalStateHashRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.GlobalStateHashRequest}
 */
proto.spacemesh.v1.GlobalStateHashRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.GlobalStateHashRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.GlobalStateHashRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.GlobalStateHashRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.GlobalStateHashRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.GlobalStateHashResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.GlobalStateHashResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.GlobalStateHashResponse.displayName = 'proto.spacemesh.v1.GlobalStateHashResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.GlobalStateHashResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.GlobalStateHashResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.GlobalStateHashResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.GlobalStateHashResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: (f = msg.getResponse()) && proto.spacemesh.v1.GlobalStateHash.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.GlobalStateHashResponse}
 */
proto.spacemesh.v1.GlobalStateHashResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.GlobalStateHashResponse;
  return proto.spacemesh.v1.GlobalStateHashResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.GlobalStateHashResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.GlobalStateHashResponse}
 */
proto.spacemesh.v1.GlobalStateHashResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spacemesh.v1.GlobalStateHash;
      reader.readMessage(value,proto.spacemesh.v1.GlobalStateHash.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.GlobalStateHashResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.GlobalStateHashResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.GlobalStateHashResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.GlobalStateHashResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.spacemesh.v1.GlobalStateHash.serializeBinaryToWriter
    );
  }
};


/**
 * optional GlobalStateHash response = 1;
 * @return {?proto.spacemesh.v1.GlobalStateHash}
 */
proto.spacemesh.v1.GlobalStateHashResponse.prototype.getResponse = function() {
  return /** @type{?proto.spacemesh.v1.GlobalStateHash} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.GlobalStateHash, 1));
};


/** @param {?proto.spacemesh.v1.GlobalStateHash|undefined} value */
proto.spacemesh.v1.GlobalStateHashResponse.prototype.setResponse = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.GlobalStateHashResponse.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.GlobalStateHashResponse.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.GlobalStateStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.GlobalStateStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.GlobalStateStreamRequest.displayName = 'proto.spacemesh.v1.GlobalStateStreamRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.GlobalStateStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.GlobalStateStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.GlobalStateStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.GlobalStateStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    globalStateDataFlags: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.GlobalStateStreamRequest}
 */
proto.spacemesh.v1.GlobalStateStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.GlobalStateStreamRequest;
  return proto.spacemesh.v1.GlobalStateStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.GlobalStateStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.GlobalStateStreamRequest}
 */
proto.spacemesh.v1.GlobalStateStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGlobalStateDataFlags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.GlobalStateStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.GlobalStateStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.GlobalStateStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.GlobalStateStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGlobalStateDataFlags();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 global_state_data_flags = 1;
 * @return {number}
 */
proto.spacemesh.v1.GlobalStateStreamRequest.prototype.getGlobalStateDataFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.spacemesh.v1.GlobalStateStreamRequest.prototype.setGlobalStateDataFlags = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.GlobalStateData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.spacemesh.v1.GlobalStateData.oneofGroups_);
};
goog.inherits(proto.spacemesh.v1.GlobalStateData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.GlobalStateData.displayName = 'proto.spacemesh.v1.GlobalStateData';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.spacemesh.v1.GlobalStateData.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.spacemesh.v1.GlobalStateData.DatumCase = {
  DATUM_NOT_SET: 0,
  REWARD: 1,
  RECEIPT: 2,
  ACCOUNT_WRAPPER: 3,
  GLOBAL_STATE: 4
};

/**
 * @return {proto.spacemesh.v1.GlobalStateData.DatumCase}
 */
proto.spacemesh.v1.GlobalStateData.prototype.getDatumCase = function() {
  return /** @type {proto.spacemesh.v1.GlobalStateData.DatumCase} */(jspb.Message.computeOneofCase(this, proto.spacemesh.v1.GlobalStateData.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.GlobalStateData.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.GlobalStateData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.GlobalStateData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.GlobalStateData.toObject = function(includeInstance, msg) {
  var f, obj = {
    reward: (f = msg.getReward()) && types_pb.Reward.toObject(includeInstance, f),
    receipt: (f = msg.getReceipt()) && proto.spacemesh.v1.TransactionReceipt.toObject(includeInstance, f),
    accountWrapper: (f = msg.getAccountWrapper()) && proto.spacemesh.v1.Account.toObject(includeInstance, f),
    globalState: (f = msg.getGlobalState()) && proto.spacemesh.v1.GlobalStateHash.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.GlobalStateData}
 */
proto.spacemesh.v1.GlobalStateData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.GlobalStateData;
  return proto.spacemesh.v1.GlobalStateData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.GlobalStateData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.GlobalStateData}
 */
proto.spacemesh.v1.GlobalStateData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_pb.Reward;
      reader.readMessage(value,types_pb.Reward.deserializeBinaryFromReader);
      msg.setReward(value);
      break;
    case 2:
      var value = new proto.spacemesh.v1.TransactionReceipt;
      reader.readMessage(value,proto.spacemesh.v1.TransactionReceipt.deserializeBinaryFromReader);
      msg.setReceipt(value);
      break;
    case 3:
      var value = new proto.spacemesh.v1.Account;
      reader.readMessage(value,proto.spacemesh.v1.Account.deserializeBinaryFromReader);
      msg.setAccountWrapper(value);
      break;
    case 4:
      var value = new proto.spacemesh.v1.GlobalStateHash;
      reader.readMessage(value,proto.spacemesh.v1.GlobalStateHash.deserializeBinaryFromReader);
      msg.setGlobalState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.GlobalStateData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.GlobalStateData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.GlobalStateData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.GlobalStateData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReward();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_pb.Reward.serializeBinaryToWriter
    );
  }
  f = message.getReceipt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.spacemesh.v1.TransactionReceipt.serializeBinaryToWriter
    );
  }
  f = message.getAccountWrapper();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.spacemesh.v1.Account.serializeBinaryToWriter
    );
  }
  f = message.getGlobalState();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.spacemesh.v1.GlobalStateHash.serializeBinaryToWriter
    );
  }
};


/**
 * optional Reward reward = 1;
 * @return {?proto.spacemesh.v1.Reward}
 */
proto.spacemesh.v1.GlobalStateData.prototype.getReward = function() {
  return /** @type{?proto.spacemesh.v1.Reward} */ (
    jspb.Message.getWrapperField(this, types_pb.Reward, 1));
};


/** @param {?proto.spacemesh.v1.Reward|undefined} value */
proto.spacemesh.v1.GlobalStateData.prototype.setReward = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.spacemesh.v1.GlobalStateData.oneofGroups_[0], value);
};


proto.spacemesh.v1.GlobalStateData.prototype.clearReward = function() {
  this.setReward(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.GlobalStateData.prototype.hasReward = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TransactionReceipt receipt = 2;
 * @return {?proto.spacemesh.v1.TransactionReceipt}
 */
proto.spacemesh.v1.GlobalStateData.prototype.getReceipt = function() {
  return /** @type{?proto.spacemesh.v1.TransactionReceipt} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.TransactionReceipt, 2));
};


/** @param {?proto.spacemesh.v1.TransactionReceipt|undefined} value */
proto.spacemesh.v1.GlobalStateData.prototype.setReceipt = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.spacemesh.v1.GlobalStateData.oneofGroups_[0], value);
};


proto.spacemesh.v1.GlobalStateData.prototype.clearReceipt = function() {
  this.setReceipt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.GlobalStateData.prototype.hasReceipt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Account account_wrapper = 3;
 * @return {?proto.spacemesh.v1.Account}
 */
proto.spacemesh.v1.GlobalStateData.prototype.getAccountWrapper = function() {
  return /** @type{?proto.spacemesh.v1.Account} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.Account, 3));
};


/** @param {?proto.spacemesh.v1.Account|undefined} value */
proto.spacemesh.v1.GlobalStateData.prototype.setAccountWrapper = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.spacemesh.v1.GlobalStateData.oneofGroups_[0], value);
};


proto.spacemesh.v1.GlobalStateData.prototype.clearAccountWrapper = function() {
  this.setAccountWrapper(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.GlobalStateData.prototype.hasAccountWrapper = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional GlobalStateHash global_state = 4;
 * @return {?proto.spacemesh.v1.GlobalStateHash}
 */
proto.spacemesh.v1.GlobalStateData.prototype.getGlobalState = function() {
  return /** @type{?proto.spacemesh.v1.GlobalStateHash} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.GlobalStateHash, 4));
};


/** @param {?proto.spacemesh.v1.GlobalStateHash|undefined} value */
proto.spacemesh.v1.GlobalStateData.prototype.setGlobalState = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.spacemesh.v1.GlobalStateData.oneofGroups_[0], value);
};


proto.spacemesh.v1.GlobalStateData.prototype.clearGlobalState = function() {
  this.setGlobalState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.GlobalStateData.prototype.hasGlobalState = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.GlobalStateStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.GlobalStateStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.GlobalStateStreamResponse.displayName = 'proto.spacemesh.v1.GlobalStateStreamResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.GlobalStateStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.GlobalStateStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.GlobalStateStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.GlobalStateStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    datum: (f = msg.getDatum()) && proto.spacemesh.v1.GlobalStateData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.GlobalStateStreamResponse}
 */
proto.spacemesh.v1.GlobalStateStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.GlobalStateStreamResponse;
  return proto.spacemesh.v1.GlobalStateStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.GlobalStateStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.GlobalStateStreamResponse}
 */
proto.spacemesh.v1.GlobalStateStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spacemesh.v1.GlobalStateData;
      reader.readMessage(value,proto.spacemesh.v1.GlobalStateData.deserializeBinaryFromReader);
      msg.setDatum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.GlobalStateStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.GlobalStateStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.GlobalStateStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.GlobalStateStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatum();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.spacemesh.v1.GlobalStateData.serializeBinaryToWriter
    );
  }
};


/**
 * optional GlobalStateData datum = 1;
 * @return {?proto.spacemesh.v1.GlobalStateData}
 */
proto.spacemesh.v1.GlobalStateStreamResponse.prototype.getDatum = function() {
  return /** @type{?proto.spacemesh.v1.GlobalStateData} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.GlobalStateData, 1));
};


/** @param {?proto.spacemesh.v1.GlobalStateData|undefined} value */
proto.spacemesh.v1.GlobalStateStreamResponse.prototype.setDatum = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.GlobalStateStreamResponse.prototype.clearDatum = function() {
  this.setDatum(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.GlobalStateStreamResponse.prototype.hasDatum = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.AppEventStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.AppEventStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.AppEventStreamRequest.displayName = 'proto.spacemesh.v1.AppEventStreamRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.AppEventStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.AppEventStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.AppEventStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AppEventStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.AppEventStreamRequest}
 */
proto.spacemesh.v1.AppEventStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.AppEventStreamRequest;
  return proto.spacemesh.v1.AppEventStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.AppEventStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.AppEventStreamRequest}
 */
proto.spacemesh.v1.AppEventStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.AppEventStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.AppEventStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.AppEventStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AppEventStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.AppEventStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.AppEventStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.AppEventStreamResponse.displayName = 'proto.spacemesh.v1.AppEventStreamResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.AppEventStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.AppEventStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.AppEventStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AppEventStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: (f = msg.getEvent()) && types_pb.AppEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.AppEventStreamResponse}
 */
proto.spacemesh.v1.AppEventStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.AppEventStreamResponse;
  return proto.spacemesh.v1.AppEventStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.AppEventStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.AppEventStreamResponse}
 */
proto.spacemesh.v1.AppEventStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_pb.AppEvent;
      reader.readMessage(value,types_pb.AppEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.AppEventStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.AppEventStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.AppEventStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AppEventStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_pb.AppEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional AppEvent event = 1;
 * @return {?proto.spacemesh.v1.AppEvent}
 */
proto.spacemesh.v1.AppEventStreamResponse.prototype.getEvent = function() {
  return /** @type{?proto.spacemesh.v1.AppEvent} */ (
    jspb.Message.getWrapperField(this, types_pb.AppEvent, 1));
};


/** @param {?proto.spacemesh.v1.AppEvent|undefined} value */
proto.spacemesh.v1.AppEventStreamResponse.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.AppEventStreamResponse.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.AppEventStreamResponse.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.spacemesh.v1.AccountDataFlag = {
  ACCOUNT_DATA_FLAG_UNSPECIFIED: 0,
  ACCOUNT_DATA_FLAG_TRANSACTION_RECEIPT: 1,
  ACCOUNT_DATA_FLAG_REWARD: 2,
  ACCOUNT_DATA_FLAG_ACCOUNT: 4
};

/**
 * @enum {number}
 */
proto.spacemesh.v1.GlobalStateDataFlag = {
  GLOBAL_STATE_DATA_FLAG_UNSPECIFIED: 0,
  GLOBAL_STATE_DATA_FLAG_TRANSACTION_RECEIPT: 1,
  GLOBAL_STATE_DATA_FLAG_REWARD: 2,
  GLOBAL_STATE_DATA_FLAG_ACCOUNT: 4,
  GLOBAL_STATE_DATA_FLAG_GLOBAL_STATE_HASH: 8
};

goog.object.extend(exports, proto.spacemesh.v1);
