/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var types_pb = require('./types_pb.js');
var google_rpc_status_pb = require('./google/rpc/status_pb.js');
goog.exportSymbol('proto.spacemesh.v1.CoinbaseResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.ComputeApiClass', null, global);
goog.exportSymbol('proto.spacemesh.v1.ConfigResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.CreatePostDataRequest', null, global);
goog.exportSymbol('proto.spacemesh.v1.EstimatedRewardsRequest', null, global);
goog.exportSymbol('proto.spacemesh.v1.EstimatedRewardsResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.IsSmeshingResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.MinGasResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.PostComputeProvider', null, global);
goog.exportSymbol('proto.spacemesh.v1.PostComputeProvidersRequest', null, global);
goog.exportSymbol('proto.spacemesh.v1.PostComputeProvidersResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.PostDataCreationProgressStreamResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.PostInitOpts', null, global);
goog.exportSymbol('proto.spacemesh.v1.PostStatus', null, global);
goog.exportSymbol('proto.spacemesh.v1.PostStatus.InitStatus', null, global);
goog.exportSymbol('proto.spacemesh.v1.PostStatusResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.SetCoinbaseRequest', null, global);
goog.exportSymbol('proto.spacemesh.v1.SetCoinbaseResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.SetMinGasRequest', null, global);
goog.exportSymbol('proto.spacemesh.v1.SetMinGasResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.SmesherIDResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.StartSmeshingRequest', null, global);
goog.exportSymbol('proto.spacemesh.v1.StartSmeshingResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.StopSmeshingRequest', null, global);
goog.exportSymbol('proto.spacemesh.v1.StopSmeshingResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.IsSmeshingResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.IsSmeshingResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.IsSmeshingResponse.displayName = 'proto.spacemesh.v1.IsSmeshingResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.IsSmeshingResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.IsSmeshingResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.IsSmeshingResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.IsSmeshingResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    isSmeshing: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.IsSmeshingResponse}
 */
proto.spacemesh.v1.IsSmeshingResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.IsSmeshingResponse;
  return proto.spacemesh.v1.IsSmeshingResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.IsSmeshingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.IsSmeshingResponse}
 */
proto.spacemesh.v1.IsSmeshingResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSmeshing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.IsSmeshingResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.IsSmeshingResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.IsSmeshingResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.IsSmeshingResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsSmeshing();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool is_smeshing = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.spacemesh.v1.IsSmeshingResponse.prototype.getIsSmeshing = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.spacemesh.v1.IsSmeshingResponse.prototype.setIsSmeshing = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.StartSmeshingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.StartSmeshingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.StartSmeshingRequest.displayName = 'proto.spacemesh.v1.StartSmeshingRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.StartSmeshingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.StartSmeshingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.StartSmeshingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.StartSmeshingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    coinbase: (f = msg.getCoinbase()) && types_pb.AccountId.toObject(includeInstance, f),
    opts: (f = msg.getOpts()) && proto.spacemesh.v1.PostInitOpts.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.StartSmeshingRequest}
 */
proto.spacemesh.v1.StartSmeshingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.StartSmeshingRequest;
  return proto.spacemesh.v1.StartSmeshingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.StartSmeshingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.StartSmeshingRequest}
 */
proto.spacemesh.v1.StartSmeshingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_pb.AccountId;
      reader.readMessage(value,types_pb.AccountId.deserializeBinaryFromReader);
      msg.setCoinbase(value);
      break;
    case 2:
      var value = new proto.spacemesh.v1.PostInitOpts;
      reader.readMessage(value,proto.spacemesh.v1.PostInitOpts.deserializeBinaryFromReader);
      msg.setOpts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.StartSmeshingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.StartSmeshingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.StartSmeshingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.StartSmeshingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoinbase();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_pb.AccountId.serializeBinaryToWriter
    );
  }
  f = message.getOpts();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.spacemesh.v1.PostInitOpts.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccountId coinbase = 1;
 * @return {?proto.spacemesh.v1.AccountId}
 */
proto.spacemesh.v1.StartSmeshingRequest.prototype.getCoinbase = function() {
  return /** @type{?proto.spacemesh.v1.AccountId} */ (
    jspb.Message.getWrapperField(this, types_pb.AccountId, 1));
};


/** @param {?proto.spacemesh.v1.AccountId|undefined} value */
proto.spacemesh.v1.StartSmeshingRequest.prototype.setCoinbase = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.StartSmeshingRequest.prototype.clearCoinbase = function() {
  this.setCoinbase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.StartSmeshingRequest.prototype.hasCoinbase = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PostInitOpts opts = 2;
 * @return {?proto.spacemesh.v1.PostInitOpts}
 */
proto.spacemesh.v1.StartSmeshingRequest.prototype.getOpts = function() {
  return /** @type{?proto.spacemesh.v1.PostInitOpts} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.PostInitOpts, 2));
};


/** @param {?proto.spacemesh.v1.PostInitOpts|undefined} value */
proto.spacemesh.v1.StartSmeshingRequest.prototype.setOpts = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.spacemesh.v1.StartSmeshingRequest.prototype.clearOpts = function() {
  this.setOpts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.StartSmeshingRequest.prototype.hasOpts = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.StartSmeshingResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.StartSmeshingResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.StartSmeshingResponse.displayName = 'proto.spacemesh.v1.StartSmeshingResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.StartSmeshingResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.StartSmeshingResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.StartSmeshingResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.StartSmeshingResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && google_rpc_status_pb.Status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.StartSmeshingResponse}
 */
proto.spacemesh.v1.StartSmeshingResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.StartSmeshingResponse;
  return proto.spacemesh.v1.StartSmeshingResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.StartSmeshingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.StartSmeshingResponse}
 */
proto.spacemesh.v1.StartSmeshingResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_rpc_status_pb.Status;
      reader.readMessage(value,google_rpc_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.StartSmeshingResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.StartSmeshingResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.StartSmeshingResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.StartSmeshingResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_rpc_status_pb.Status.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.rpc.Status status = 1;
 * @return {?proto.google.rpc.Status}
 */
proto.spacemesh.v1.StartSmeshingResponse.prototype.getStatus = function() {
  return /** @type{?proto.google.rpc.Status} */ (
    jspb.Message.getWrapperField(this, google_rpc_status_pb.Status, 1));
};


/** @param {?proto.google.rpc.Status|undefined} value */
proto.spacemesh.v1.StartSmeshingResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.StartSmeshingResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.StartSmeshingResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.StopSmeshingResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.StopSmeshingResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.StopSmeshingResponse.displayName = 'proto.spacemesh.v1.StopSmeshingResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.StopSmeshingResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.StopSmeshingResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.StopSmeshingResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.StopSmeshingResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && google_rpc_status_pb.Status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.StopSmeshingResponse}
 */
proto.spacemesh.v1.StopSmeshingResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.StopSmeshingResponse;
  return proto.spacemesh.v1.StopSmeshingResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.StopSmeshingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.StopSmeshingResponse}
 */
proto.spacemesh.v1.StopSmeshingResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_rpc_status_pb.Status;
      reader.readMessage(value,google_rpc_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.StopSmeshingResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.StopSmeshingResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.StopSmeshingResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.StopSmeshingResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_rpc_status_pb.Status.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.rpc.Status status = 1;
 * @return {?proto.google.rpc.Status}
 */
proto.spacemesh.v1.StopSmeshingResponse.prototype.getStatus = function() {
  return /** @type{?proto.google.rpc.Status} */ (
    jspb.Message.getWrapperField(this, google_rpc_status_pb.Status, 1));
};


/** @param {?proto.google.rpc.Status|undefined} value */
proto.spacemesh.v1.StopSmeshingResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.StopSmeshingResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.StopSmeshingResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.SetCoinbaseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.SetCoinbaseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.SetCoinbaseRequest.displayName = 'proto.spacemesh.v1.SetCoinbaseRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.SetCoinbaseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.SetCoinbaseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.SetCoinbaseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SetCoinbaseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && types_pb.AccountId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.SetCoinbaseRequest}
 */
proto.spacemesh.v1.SetCoinbaseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.SetCoinbaseRequest;
  return proto.spacemesh.v1.SetCoinbaseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.SetCoinbaseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.SetCoinbaseRequest}
 */
proto.spacemesh.v1.SetCoinbaseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_pb.AccountId;
      reader.readMessage(value,types_pb.AccountId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.SetCoinbaseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.SetCoinbaseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.SetCoinbaseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SetCoinbaseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_pb.AccountId.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccountId id = 1;
 * @return {?proto.spacemesh.v1.AccountId}
 */
proto.spacemesh.v1.SetCoinbaseRequest.prototype.getId = function() {
  return /** @type{?proto.spacemesh.v1.AccountId} */ (
    jspb.Message.getWrapperField(this, types_pb.AccountId, 1));
};


/** @param {?proto.spacemesh.v1.AccountId|undefined} value */
proto.spacemesh.v1.SetCoinbaseRequest.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.SetCoinbaseRequest.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.SetCoinbaseRequest.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.SetCoinbaseResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.SetCoinbaseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.SetCoinbaseResponse.displayName = 'proto.spacemesh.v1.SetCoinbaseResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.SetCoinbaseResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.SetCoinbaseResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.SetCoinbaseResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SetCoinbaseResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && google_rpc_status_pb.Status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.SetCoinbaseResponse}
 */
proto.spacemesh.v1.SetCoinbaseResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.SetCoinbaseResponse;
  return proto.spacemesh.v1.SetCoinbaseResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.SetCoinbaseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.SetCoinbaseResponse}
 */
proto.spacemesh.v1.SetCoinbaseResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_rpc_status_pb.Status;
      reader.readMessage(value,google_rpc_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.SetCoinbaseResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.SetCoinbaseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.SetCoinbaseResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SetCoinbaseResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_rpc_status_pb.Status.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.rpc.Status status = 1;
 * @return {?proto.google.rpc.Status}
 */
proto.spacemesh.v1.SetCoinbaseResponse.prototype.getStatus = function() {
  return /** @type{?proto.google.rpc.Status} */ (
    jspb.Message.getWrapperField(this, google_rpc_status_pb.Status, 1));
};


/** @param {?proto.google.rpc.Status|undefined} value */
proto.spacemesh.v1.SetCoinbaseResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.SetCoinbaseResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.SetCoinbaseResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.MinGasResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.MinGasResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.MinGasResponse.displayName = 'proto.spacemesh.v1.MinGasResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.MinGasResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.MinGasResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.MinGasResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.MinGasResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    mingas: (f = msg.getMingas()) && types_pb.SimpleInt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.MinGasResponse}
 */
proto.spacemesh.v1.MinGasResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.MinGasResponse;
  return proto.spacemesh.v1.MinGasResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.MinGasResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.MinGasResponse}
 */
proto.spacemesh.v1.MinGasResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_pb.SimpleInt;
      reader.readMessage(value,types_pb.SimpleInt.deserializeBinaryFromReader);
      msg.setMingas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.MinGasResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.MinGasResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.MinGasResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.MinGasResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMingas();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_pb.SimpleInt.serializeBinaryToWriter
    );
  }
};


/**
 * optional SimpleInt mingas = 1;
 * @return {?proto.spacemesh.v1.SimpleInt}
 */
proto.spacemesh.v1.MinGasResponse.prototype.getMingas = function() {
  return /** @type{?proto.spacemesh.v1.SimpleInt} */ (
    jspb.Message.getWrapperField(this, types_pb.SimpleInt, 1));
};


/** @param {?proto.spacemesh.v1.SimpleInt|undefined} value */
proto.spacemesh.v1.MinGasResponse.prototype.setMingas = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.MinGasResponse.prototype.clearMingas = function() {
  this.setMingas(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.MinGasResponse.prototype.hasMingas = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.SetMinGasRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.SetMinGasRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.SetMinGasRequest.displayName = 'proto.spacemesh.v1.SetMinGasRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.SetMinGasRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.SetMinGasRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.SetMinGasRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SetMinGasRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    mingas: (f = msg.getMingas()) && types_pb.SimpleInt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.SetMinGasRequest}
 */
proto.spacemesh.v1.SetMinGasRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.SetMinGasRequest;
  return proto.spacemesh.v1.SetMinGasRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.SetMinGasRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.SetMinGasRequest}
 */
proto.spacemesh.v1.SetMinGasRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_pb.SimpleInt;
      reader.readMessage(value,types_pb.SimpleInt.deserializeBinaryFromReader);
      msg.setMingas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.SetMinGasRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.SetMinGasRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.SetMinGasRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SetMinGasRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMingas();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_pb.SimpleInt.serializeBinaryToWriter
    );
  }
};


/**
 * optional SimpleInt mingas = 1;
 * @return {?proto.spacemesh.v1.SimpleInt}
 */
proto.spacemesh.v1.SetMinGasRequest.prototype.getMingas = function() {
  return /** @type{?proto.spacemesh.v1.SimpleInt} */ (
    jspb.Message.getWrapperField(this, types_pb.SimpleInt, 1));
};


/** @param {?proto.spacemesh.v1.SimpleInt|undefined} value */
proto.spacemesh.v1.SetMinGasRequest.prototype.setMingas = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.SetMinGasRequest.prototype.clearMingas = function() {
  this.setMingas(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.SetMinGasRequest.prototype.hasMingas = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.SetMinGasResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.SetMinGasResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.SetMinGasResponse.displayName = 'proto.spacemesh.v1.SetMinGasResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.SetMinGasResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.SetMinGasResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.SetMinGasResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SetMinGasResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && google_rpc_status_pb.Status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.SetMinGasResponse}
 */
proto.spacemesh.v1.SetMinGasResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.SetMinGasResponse;
  return proto.spacemesh.v1.SetMinGasResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.SetMinGasResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.SetMinGasResponse}
 */
proto.spacemesh.v1.SetMinGasResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_rpc_status_pb.Status;
      reader.readMessage(value,google_rpc_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.SetMinGasResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.SetMinGasResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.SetMinGasResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SetMinGasResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_rpc_status_pb.Status.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.rpc.Status status = 1;
 * @return {?proto.google.rpc.Status}
 */
proto.spacemesh.v1.SetMinGasResponse.prototype.getStatus = function() {
  return /** @type{?proto.google.rpc.Status} */ (
    jspb.Message.getWrapperField(this, google_rpc_status_pb.Status, 1));
};


/** @param {?proto.google.rpc.Status|undefined} value */
proto.spacemesh.v1.SetMinGasResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.SetMinGasResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.SetMinGasResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.SmesherIDResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.SmesherIDResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.SmesherIDResponse.displayName = 'proto.spacemesh.v1.SmesherIDResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.SmesherIDResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.SmesherIDResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.SmesherIDResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SmesherIDResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: (f = msg.getAccountId()) && types_pb.AccountId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.SmesherIDResponse}
 */
proto.spacemesh.v1.SmesherIDResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.SmesherIDResponse;
  return proto.spacemesh.v1.SmesherIDResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.SmesherIDResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.SmesherIDResponse}
 */
proto.spacemesh.v1.SmesherIDResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_pb.AccountId;
      reader.readMessage(value,types_pb.AccountId.deserializeBinaryFromReader);
      msg.setAccountId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.SmesherIDResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.SmesherIDResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.SmesherIDResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SmesherIDResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_pb.AccountId.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccountId account_id = 1;
 * @return {?proto.spacemesh.v1.AccountId}
 */
proto.spacemesh.v1.SmesherIDResponse.prototype.getAccountId = function() {
  return /** @type{?proto.spacemesh.v1.AccountId} */ (
    jspb.Message.getWrapperField(this, types_pb.AccountId, 1));
};


/** @param {?proto.spacemesh.v1.AccountId|undefined} value */
proto.spacemesh.v1.SmesherIDResponse.prototype.setAccountId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.SmesherIDResponse.prototype.clearAccountId = function() {
  this.setAccountId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.SmesherIDResponse.prototype.hasAccountId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.CoinbaseResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.CoinbaseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.CoinbaseResponse.displayName = 'proto.spacemesh.v1.CoinbaseResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.CoinbaseResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.CoinbaseResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.CoinbaseResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.CoinbaseResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: (f = msg.getAccountId()) && types_pb.AccountId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.CoinbaseResponse}
 */
proto.spacemesh.v1.CoinbaseResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.CoinbaseResponse;
  return proto.spacemesh.v1.CoinbaseResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.CoinbaseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.CoinbaseResponse}
 */
proto.spacemesh.v1.CoinbaseResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_pb.AccountId;
      reader.readMessage(value,types_pb.AccountId.deserializeBinaryFromReader);
      msg.setAccountId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.CoinbaseResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.CoinbaseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.CoinbaseResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.CoinbaseResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_pb.AccountId.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccountId account_id = 1;
 * @return {?proto.spacemesh.v1.AccountId}
 */
proto.spacemesh.v1.CoinbaseResponse.prototype.getAccountId = function() {
  return /** @type{?proto.spacemesh.v1.AccountId} */ (
    jspb.Message.getWrapperField(this, types_pb.AccountId, 1));
};


/** @param {?proto.spacemesh.v1.AccountId|undefined} value */
proto.spacemesh.v1.CoinbaseResponse.prototype.setAccountId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.CoinbaseResponse.prototype.clearAccountId = function() {
  this.setAccountId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.CoinbaseResponse.prototype.hasAccountId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.PostComputeProvider = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.PostComputeProvider, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.PostComputeProvider.displayName = 'proto.spacemesh.v1.PostComputeProvider';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.PostComputeProvider.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.PostComputeProvider.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.PostComputeProvider} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.PostComputeProvider.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    model: jspb.Message.getFieldWithDefault(msg, 2, ""),
    computeApi: jspb.Message.getFieldWithDefault(msg, 3, 0),
    performance: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.PostComputeProvider}
 */
proto.spacemesh.v1.PostComputeProvider.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.PostComputeProvider;
  return proto.spacemesh.v1.PostComputeProvider.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.PostComputeProvider} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.PostComputeProvider}
 */
proto.spacemesh.v1.PostComputeProvider.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setModel(value);
      break;
    case 3:
      var value = /** @type {!proto.spacemesh.v1.ComputeApiClass} */ (reader.readEnum());
      msg.setComputeApi(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPerformance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.PostComputeProvider.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.PostComputeProvider.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.PostComputeProvider} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.PostComputeProvider.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getModel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getComputeApi();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPerformance();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.spacemesh.v1.PostComputeProvider.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.spacemesh.v1.PostComputeProvider.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string model = 2;
 * @return {string}
 */
proto.spacemesh.v1.PostComputeProvider.prototype.getModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.spacemesh.v1.PostComputeProvider.prototype.setModel = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ComputeApiClass compute_api = 3;
 * @return {!proto.spacemesh.v1.ComputeApiClass}
 */
proto.spacemesh.v1.PostComputeProvider.prototype.getComputeApi = function() {
  return /** @type {!proto.spacemesh.v1.ComputeApiClass} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.spacemesh.v1.ComputeApiClass} value */
proto.spacemesh.v1.PostComputeProvider.prototype.setComputeApi = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional uint64 performance = 4;
 * @return {number}
 */
proto.spacemesh.v1.PostComputeProvider.prototype.getPerformance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.spacemesh.v1.PostComputeProvider.prototype.setPerformance = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.PostComputeProvidersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.spacemesh.v1.PostComputeProvidersResponse.repeatedFields_, null);
};
goog.inherits(proto.spacemesh.v1.PostComputeProvidersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.PostComputeProvidersResponse.displayName = 'proto.spacemesh.v1.PostComputeProvidersResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.spacemesh.v1.PostComputeProvidersResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.PostComputeProvidersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.PostComputeProvidersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.PostComputeProvidersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.PostComputeProvidersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    postComputeProviderList: jspb.Message.toObjectList(msg.getPostComputeProviderList(),
    proto.spacemesh.v1.PostComputeProvider.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.PostComputeProvidersResponse}
 */
proto.spacemesh.v1.PostComputeProvidersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.PostComputeProvidersResponse;
  return proto.spacemesh.v1.PostComputeProvidersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.PostComputeProvidersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.PostComputeProvidersResponse}
 */
proto.spacemesh.v1.PostComputeProvidersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spacemesh.v1.PostComputeProvider;
      reader.readMessage(value,proto.spacemesh.v1.PostComputeProvider.deserializeBinaryFromReader);
      msg.addPostComputeProvider(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.PostComputeProvidersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.PostComputeProvidersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.PostComputeProvidersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.PostComputeProvidersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPostComputeProviderList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.spacemesh.v1.PostComputeProvider.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PostComputeProvider post_compute_provider = 1;
 * @return {!Array<!proto.spacemesh.v1.PostComputeProvider>}
 */
proto.spacemesh.v1.PostComputeProvidersResponse.prototype.getPostComputeProviderList = function() {
  return /** @type{!Array<!proto.spacemesh.v1.PostComputeProvider>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.spacemesh.v1.PostComputeProvider, 1));
};


/** @param {!Array<!proto.spacemesh.v1.PostComputeProvider>} value */
proto.spacemesh.v1.PostComputeProvidersResponse.prototype.setPostComputeProviderList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.spacemesh.v1.PostComputeProvider=} opt_value
 * @param {number=} opt_index
 * @return {!proto.spacemesh.v1.PostComputeProvider}
 */
proto.spacemesh.v1.PostComputeProvidersResponse.prototype.addPostComputeProvider = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.spacemesh.v1.PostComputeProvider, opt_index);
};


proto.spacemesh.v1.PostComputeProvidersResponse.prototype.clearPostComputeProviderList = function() {
  this.setPostComputeProviderList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.PostInitOpts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.PostInitOpts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.PostInitOpts.displayName = 'proto.spacemesh.v1.PostInitOpts';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.PostInitOpts.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.PostInitOpts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.PostInitOpts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.PostInitOpts.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataDir: jspb.Message.getFieldWithDefault(msg, 1, ""),
    numUnits: jspb.Message.getFieldWithDefault(msg, 2, 0),
    numFiles: jspb.Message.getFieldWithDefault(msg, 3, 0),
    computeProviderId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    throttle: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.PostInitOpts}
 */
proto.spacemesh.v1.PostInitOpts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.PostInitOpts;
  return proto.spacemesh.v1.PostInitOpts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.PostInitOpts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.PostInitOpts}
 */
proto.spacemesh.v1.PostInitOpts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataDir(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumUnits(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumFiles(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setComputeProviderId(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setThrottle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.PostInitOpts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.PostInitOpts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.PostInitOpts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.PostInitOpts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataDir();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNumUnits();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getNumFiles();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getComputeProviderId();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getThrottle();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string data_dir = 1;
 * @return {string}
 */
proto.spacemesh.v1.PostInitOpts.prototype.getDataDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.spacemesh.v1.PostInitOpts.prototype.setDataDir = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 num_units = 2;
 * @return {number}
 */
proto.spacemesh.v1.PostInitOpts.prototype.getNumUnits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.spacemesh.v1.PostInitOpts.prototype.setNumUnits = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 num_files = 3;
 * @return {number}
 */
proto.spacemesh.v1.PostInitOpts.prototype.getNumFiles = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.spacemesh.v1.PostInitOpts.prototype.setNumFiles = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 compute_provider_id = 4;
 * @return {number}
 */
proto.spacemesh.v1.PostInitOpts.prototype.getComputeProviderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.spacemesh.v1.PostInitOpts.prototype.setComputeProviderId = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool throttle = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.spacemesh.v1.PostInitOpts.prototype.getThrottle = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.spacemesh.v1.PostInitOpts.prototype.setThrottle = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.CreatePostDataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.CreatePostDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.CreatePostDataRequest.displayName = 'proto.spacemesh.v1.CreatePostDataRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.CreatePostDataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.CreatePostDataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.CreatePostDataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.CreatePostDataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    opts: (f = msg.getOpts()) && proto.spacemesh.v1.PostInitOpts.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.CreatePostDataRequest}
 */
proto.spacemesh.v1.CreatePostDataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.CreatePostDataRequest;
  return proto.spacemesh.v1.CreatePostDataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.CreatePostDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.CreatePostDataRequest}
 */
proto.spacemesh.v1.CreatePostDataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spacemesh.v1.PostInitOpts;
      reader.readMessage(value,proto.spacemesh.v1.PostInitOpts.deserializeBinaryFromReader);
      msg.setOpts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.CreatePostDataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.CreatePostDataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.CreatePostDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.CreatePostDataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpts();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.spacemesh.v1.PostInitOpts.serializeBinaryToWriter
    );
  }
};


/**
 * optional PostInitOpts opts = 1;
 * @return {?proto.spacemesh.v1.PostInitOpts}
 */
proto.spacemesh.v1.CreatePostDataRequest.prototype.getOpts = function() {
  return /** @type{?proto.spacemesh.v1.PostInitOpts} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.PostInitOpts, 1));
};


/** @param {?proto.spacemesh.v1.PostInitOpts|undefined} value */
proto.spacemesh.v1.CreatePostDataRequest.prototype.setOpts = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.CreatePostDataRequest.prototype.clearOpts = function() {
  this.setOpts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.CreatePostDataRequest.prototype.hasOpts = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.StopSmeshingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.StopSmeshingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.StopSmeshingRequest.displayName = 'proto.spacemesh.v1.StopSmeshingRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.StopSmeshingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.StopSmeshingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.StopSmeshingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.StopSmeshingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deleteFiles: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.StopSmeshingRequest}
 */
proto.spacemesh.v1.StopSmeshingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.StopSmeshingRequest;
  return proto.spacemesh.v1.StopSmeshingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.StopSmeshingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.StopSmeshingRequest}
 */
proto.spacemesh.v1.StopSmeshingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeleteFiles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.StopSmeshingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.StopSmeshingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.StopSmeshingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.StopSmeshingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeleteFiles();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool delete_files = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.spacemesh.v1.StopSmeshingRequest.prototype.getDeleteFiles = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.spacemesh.v1.StopSmeshingRequest.prototype.setDeleteFiles = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.PostComputeProvidersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.PostComputeProvidersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.PostComputeProvidersRequest.displayName = 'proto.spacemesh.v1.PostComputeProvidersRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.PostComputeProvidersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.PostComputeProvidersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.PostComputeProvidersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.PostComputeProvidersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    benchmark: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.PostComputeProvidersRequest}
 */
proto.spacemesh.v1.PostComputeProvidersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.PostComputeProvidersRequest;
  return proto.spacemesh.v1.PostComputeProvidersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.PostComputeProvidersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.PostComputeProvidersRequest}
 */
proto.spacemesh.v1.PostComputeProvidersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenchmark(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.PostComputeProvidersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.PostComputeProvidersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.PostComputeProvidersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.PostComputeProvidersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBenchmark();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool benchmark = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.spacemesh.v1.PostComputeProvidersRequest.prototype.getBenchmark = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.spacemesh.v1.PostComputeProvidersRequest.prototype.setBenchmark = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.PostStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.PostStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.PostStatus.displayName = 'proto.spacemesh.v1.PostStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.PostStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.PostStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.PostStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.PostStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    initStatus: jspb.Message.getFieldWithDefault(msg, 1, 0),
    initOpts: (f = msg.getInitOpts()) && proto.spacemesh.v1.PostInitOpts.toObject(includeInstance, f),
    numLabelsWritten: jspb.Message.getFieldWithDefault(msg, 4, 0),
    errorMessage: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.PostStatus}
 */
proto.spacemesh.v1.PostStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.PostStatus;
  return proto.spacemesh.v1.PostStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.PostStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.PostStatus}
 */
proto.spacemesh.v1.PostStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.spacemesh.v1.PostStatus.InitStatus} */ (reader.readEnum());
      msg.setInitStatus(value);
      break;
    case 2:
      var value = new proto.spacemesh.v1.PostInitOpts;
      reader.readMessage(value,proto.spacemesh.v1.PostInitOpts.deserializeBinaryFromReader);
      msg.setInitOpts(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumLabelsWritten(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.PostStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.PostStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.PostStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.PostStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getInitOpts();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.spacemesh.v1.PostInitOpts.serializeBinaryToWriter
    );
  }
  f = message.getNumLabelsWritten();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.spacemesh.v1.PostStatus.InitStatus = {
  INIT_STATUS_UNSPECIFIED: 0,
  INIT_STATUS_NOT_STARTED: 1,
  INIT_STATUS_IN_PROGRESS: 2,
  INIT_STATUS_COMPLETE: 3,
  INIT_STATUS_ERROR: 4
};

/**
 * optional InitStatus init_status = 1;
 * @return {!proto.spacemesh.v1.PostStatus.InitStatus}
 */
proto.spacemesh.v1.PostStatus.prototype.getInitStatus = function() {
  return /** @type {!proto.spacemesh.v1.PostStatus.InitStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.spacemesh.v1.PostStatus.InitStatus} value */
proto.spacemesh.v1.PostStatus.prototype.setInitStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional PostInitOpts init_opts = 2;
 * @return {?proto.spacemesh.v1.PostInitOpts}
 */
proto.spacemesh.v1.PostStatus.prototype.getInitOpts = function() {
  return /** @type{?proto.spacemesh.v1.PostInitOpts} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.PostInitOpts, 2));
};


/** @param {?proto.spacemesh.v1.PostInitOpts|undefined} value */
proto.spacemesh.v1.PostStatus.prototype.setInitOpts = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.spacemesh.v1.PostStatus.prototype.clearInitOpts = function() {
  this.setInitOpts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.PostStatus.prototype.hasInitOpts = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 num_labels_written = 4;
 * @return {number}
 */
proto.spacemesh.v1.PostStatus.prototype.getNumLabelsWritten = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.spacemesh.v1.PostStatus.prototype.setNumLabelsWritten = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string error_message = 5;
 * @return {string}
 */
proto.spacemesh.v1.PostStatus.prototype.getErrorMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.spacemesh.v1.PostStatus.prototype.setErrorMessage = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.PostStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.PostStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.PostStatusResponse.displayName = 'proto.spacemesh.v1.PostStatusResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.PostStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.PostStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.PostStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.PostStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.spacemesh.v1.PostStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.PostStatusResponse}
 */
proto.spacemesh.v1.PostStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.PostStatusResponse;
  return proto.spacemesh.v1.PostStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.PostStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.PostStatusResponse}
 */
proto.spacemesh.v1.PostStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spacemesh.v1.PostStatus;
      reader.readMessage(value,proto.spacemesh.v1.PostStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.PostStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.PostStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.PostStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.PostStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.spacemesh.v1.PostStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional PostStatus status = 1;
 * @return {?proto.spacemesh.v1.PostStatus}
 */
proto.spacemesh.v1.PostStatusResponse.prototype.getStatus = function() {
  return /** @type{?proto.spacemesh.v1.PostStatus} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.PostStatus, 1));
};


/** @param {?proto.spacemesh.v1.PostStatus|undefined} value */
proto.spacemesh.v1.PostStatusResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.PostStatusResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.PostStatusResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.PostDataCreationProgressStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.PostDataCreationProgressStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.PostDataCreationProgressStreamResponse.displayName = 'proto.spacemesh.v1.PostDataCreationProgressStreamResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.PostDataCreationProgressStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.PostDataCreationProgressStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.PostDataCreationProgressStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.PostDataCreationProgressStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.spacemesh.v1.PostStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.PostDataCreationProgressStreamResponse}
 */
proto.spacemesh.v1.PostDataCreationProgressStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.PostDataCreationProgressStreamResponse;
  return proto.spacemesh.v1.PostDataCreationProgressStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.PostDataCreationProgressStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.PostDataCreationProgressStreamResponse}
 */
proto.spacemesh.v1.PostDataCreationProgressStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spacemesh.v1.PostStatus;
      reader.readMessage(value,proto.spacemesh.v1.PostStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.PostDataCreationProgressStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.PostDataCreationProgressStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.PostDataCreationProgressStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.PostDataCreationProgressStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.spacemesh.v1.PostStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional PostStatus status = 1;
 * @return {?proto.spacemesh.v1.PostStatus}
 */
proto.spacemesh.v1.PostDataCreationProgressStreamResponse.prototype.getStatus = function() {
  return /** @type{?proto.spacemesh.v1.PostStatus} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.PostStatus, 1));
};


/** @param {?proto.spacemesh.v1.PostStatus|undefined} value */
proto.spacemesh.v1.PostDataCreationProgressStreamResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.PostDataCreationProgressStreamResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.PostDataCreationProgressStreamResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.EstimatedRewardsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.EstimatedRewardsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.EstimatedRewardsRequest.displayName = 'proto.spacemesh.v1.EstimatedRewardsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.EstimatedRewardsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.EstimatedRewardsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.EstimatedRewardsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.EstimatedRewardsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.EstimatedRewardsRequest}
 */
proto.spacemesh.v1.EstimatedRewardsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.EstimatedRewardsRequest;
  return proto.spacemesh.v1.EstimatedRewardsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.EstimatedRewardsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.EstimatedRewardsRequest}
 */
proto.spacemesh.v1.EstimatedRewardsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.EstimatedRewardsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.EstimatedRewardsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.EstimatedRewardsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.EstimatedRewardsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.EstimatedRewardsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.EstimatedRewardsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.EstimatedRewardsResponse.displayName = 'proto.spacemesh.v1.EstimatedRewardsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.EstimatedRewardsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.EstimatedRewardsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.EstimatedRewardsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.EstimatedRewardsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: (f = msg.getAmount()) && types_pb.Amount.toObject(includeInstance, f),
    numUnits: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.EstimatedRewardsResponse}
 */
proto.spacemesh.v1.EstimatedRewardsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.EstimatedRewardsResponse;
  return proto.spacemesh.v1.EstimatedRewardsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.EstimatedRewardsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.EstimatedRewardsResponse}
 */
proto.spacemesh.v1.EstimatedRewardsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_pb.Amount;
      reader.readMessage(value,types_pb.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumUnits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.EstimatedRewardsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.EstimatedRewardsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.EstimatedRewardsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.EstimatedRewardsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getNumUnits();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional Amount amount = 1;
 * @return {?proto.spacemesh.v1.Amount}
 */
proto.spacemesh.v1.EstimatedRewardsResponse.prototype.getAmount = function() {
  return /** @type{?proto.spacemesh.v1.Amount} */ (
    jspb.Message.getWrapperField(this, types_pb.Amount, 1));
};


/** @param {?proto.spacemesh.v1.Amount|undefined} value */
proto.spacemesh.v1.EstimatedRewardsResponse.prototype.setAmount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.EstimatedRewardsResponse.prototype.clearAmount = function() {
  this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.EstimatedRewardsResponse.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 num_units = 2;
 * @return {number}
 */
proto.spacemesh.v1.EstimatedRewardsResponse.prototype.getNumUnits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.spacemesh.v1.EstimatedRewardsResponse.prototype.setNumUnits = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.ConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.ConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.ConfigResponse.displayName = 'proto.spacemesh.v1.ConfigResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.ConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.ConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.ConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.ConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    bitsPerLabel: jspb.Message.getFieldWithDefault(msg, 1, 0),
    labelsPerUnit: jspb.Message.getFieldWithDefault(msg, 2, 0),
    minNumUnits: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maxNumUnits: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.ConfigResponse}
 */
proto.spacemesh.v1.ConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.ConfigResponse;
  return proto.spacemesh.v1.ConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.ConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.ConfigResponse}
 */
proto.spacemesh.v1.ConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBitsPerLabel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLabelsPerUnit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinNumUnits(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxNumUnits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.ConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.ConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.ConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.ConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBitsPerLabel();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLabelsPerUnit();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMinNumUnits();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMaxNumUnits();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 bits_per_label = 1;
 * @return {number}
 */
proto.spacemesh.v1.ConfigResponse.prototype.getBitsPerLabel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.spacemesh.v1.ConfigResponse.prototype.setBitsPerLabel = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 labels_per_unit = 2;
 * @return {number}
 */
proto.spacemesh.v1.ConfigResponse.prototype.getLabelsPerUnit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.spacemesh.v1.ConfigResponse.prototype.setLabelsPerUnit = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 min_num_units = 3;
 * @return {number}
 */
proto.spacemesh.v1.ConfigResponse.prototype.getMinNumUnits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.spacemesh.v1.ConfigResponse.prototype.setMinNumUnits = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 max_num_units = 4;
 * @return {number}
 */
proto.spacemesh.v1.ConfigResponse.prototype.getMaxNumUnits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.spacemesh.v1.ConfigResponse.prototype.setMaxNumUnits = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.spacemesh.v1.ComputeApiClass = {
  COMPUTE_API_CLASS_UNSPECIFIED: 0,
  COMPUTE_API_CLASS_CPU: 1,
  COMPUTE_API_CLASS_CUDA: 2,
  COMPUTE_API_CLASS_VULKAN: 3
};

goog.object.extend(exports, proto.spacemesh.v1);
