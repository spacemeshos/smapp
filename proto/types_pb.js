/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.spacemesh.v1.AccountId', null, global);
goog.exportSymbol('proto.spacemesh.v1.Activation', null, global);
goog.exportSymbol('proto.spacemesh.v1.ActivationId', null, global);
goog.exportSymbol('proto.spacemesh.v1.Amount', null, global);
goog.exportSymbol('proto.spacemesh.v1.AppEvent', null, global);
goog.exportSymbol('proto.spacemesh.v1.Block', null, global);
goog.exportSymbol('proto.spacemesh.v1.CoinTransferTransaction', null, global);
goog.exportSymbol('proto.spacemesh.v1.GasOffered', null, global);
goog.exportSymbol('proto.spacemesh.v1.Layer', null, global);
goog.exportSymbol('proto.spacemesh.v1.Layer.LayerStatus', null, global);
goog.exportSymbol('proto.spacemesh.v1.LayerNumber', null, global);
goog.exportSymbol('proto.spacemesh.v1.MeshTransaction', null, global);
goog.exportSymbol('proto.spacemesh.v1.Reward', null, global);
goog.exportSymbol('proto.spacemesh.v1.Signature', null, global);
goog.exportSymbol('proto.spacemesh.v1.Signature.Scheme', null, global);
goog.exportSymbol('proto.spacemesh.v1.SimpleInt', null, global);
goog.exportSymbol('proto.spacemesh.v1.SimpleString', null, global);
goog.exportSymbol('proto.spacemesh.v1.SmartContractTransaction', null, global);
goog.exportSymbol('proto.spacemesh.v1.SmartContractTransaction.TransactionType', null, global);
goog.exportSymbol('proto.spacemesh.v1.SmesherId', null, global);
goog.exportSymbol('proto.spacemesh.v1.Transaction', null, global);
goog.exportSymbol('proto.spacemesh.v1.TransactionId', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.SimpleInt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.SimpleInt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.SimpleInt.displayName = 'proto.spacemesh.v1.SimpleInt';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.SimpleInt.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.SimpleInt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.SimpleInt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SimpleInt.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.SimpleInt}
 */
proto.spacemesh.v1.SimpleInt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.SimpleInt;
  return proto.spacemesh.v1.SimpleInt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.SimpleInt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.SimpleInt}
 */
proto.spacemesh.v1.SimpleInt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.SimpleInt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.SimpleInt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.SimpleInt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SimpleInt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 value = 1;
 * @return {number}
 */
proto.spacemesh.v1.SimpleInt.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.spacemesh.v1.SimpleInt.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.SimpleString = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.SimpleString, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.SimpleString.displayName = 'proto.spacemesh.v1.SimpleString';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.SimpleString.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.SimpleString.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.SimpleString} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SimpleString.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.SimpleString}
 */
proto.spacemesh.v1.SimpleString.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.SimpleString;
  return proto.spacemesh.v1.SimpleString.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.SimpleString} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.SimpleString}
 */
proto.spacemesh.v1.SimpleString.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.SimpleString.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.SimpleString.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.SimpleString} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SimpleString.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.spacemesh.v1.SimpleString.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.spacemesh.v1.SimpleString.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.Amount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.Amount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.Amount.displayName = 'proto.spacemesh.v1.Amount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.Amount.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.Amount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.Amount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Amount.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.Amount}
 */
proto.spacemesh.v1.Amount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.Amount;
  return proto.spacemesh.v1.Amount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.Amount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.Amount}
 */
proto.spacemesh.v1.Amount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Amount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.Amount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.Amount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Amount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 value = 1;
 * @return {number}
 */
proto.spacemesh.v1.Amount.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.spacemesh.v1.Amount.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.AccountId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.AccountId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.AccountId.displayName = 'proto.spacemesh.v1.AccountId';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.AccountId.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.AccountId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.AccountId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AccountId.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.AccountId}
 */
proto.spacemesh.v1.AccountId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.AccountId;
  return proto.spacemesh.v1.AccountId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.AccountId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.AccountId}
 */
proto.spacemesh.v1.AccountId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.AccountId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.AccountId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.AccountId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AccountId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.spacemesh.v1.AccountId.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.spacemesh.v1.AccountId.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.AccountId.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.spacemesh.v1.AccountId.prototype.setAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.TransactionId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.TransactionId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.TransactionId.displayName = 'proto.spacemesh.v1.TransactionId';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.TransactionId.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.TransactionId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.TransactionId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.TransactionId.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.TransactionId}
 */
proto.spacemesh.v1.TransactionId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.TransactionId;
  return proto.spacemesh.v1.TransactionId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.TransactionId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.TransactionId}
 */
proto.spacemesh.v1.TransactionId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.TransactionId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.TransactionId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.TransactionId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.TransactionId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.spacemesh.v1.TransactionId.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.spacemesh.v1.TransactionId.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.TransactionId.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/** @param {!(string|Uint8Array)} value */
proto.spacemesh.v1.TransactionId.prototype.setId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.ActivationId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.ActivationId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.ActivationId.displayName = 'proto.spacemesh.v1.ActivationId';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.ActivationId.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.ActivationId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.ActivationId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.ActivationId.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.ActivationId}
 */
proto.spacemesh.v1.ActivationId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.ActivationId;
  return proto.spacemesh.v1.ActivationId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.ActivationId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.ActivationId}
 */
proto.spacemesh.v1.ActivationId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.ActivationId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.ActivationId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.ActivationId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.ActivationId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.spacemesh.v1.ActivationId.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.spacemesh.v1.ActivationId.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.ActivationId.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/** @param {!(string|Uint8Array)} value */
proto.spacemesh.v1.ActivationId.prototype.setId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.SmesherId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.SmesherId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.SmesherId.displayName = 'proto.spacemesh.v1.SmesherId';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.SmesherId.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.SmesherId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.SmesherId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SmesherId.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.SmesherId}
 */
proto.spacemesh.v1.SmesherId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.SmesherId;
  return proto.spacemesh.v1.SmesherId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.SmesherId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.SmesherId}
 */
proto.spacemesh.v1.SmesherId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.SmesherId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.SmesherId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.SmesherId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SmesherId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.spacemesh.v1.SmesherId.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.spacemesh.v1.SmesherId.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.SmesherId.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/** @param {!(string|Uint8Array)} value */
proto.spacemesh.v1.SmesherId.prototype.setId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.GasOffered = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.GasOffered, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.GasOffered.displayName = 'proto.spacemesh.v1.GasOffered';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.GasOffered.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.GasOffered.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.GasOffered} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.GasOffered.toObject = function(includeInstance, msg) {
  var f, obj = {
    gasProvided: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gasPrice: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.GasOffered}
 */
proto.spacemesh.v1.GasOffered.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.GasOffered;
  return proto.spacemesh.v1.GasOffered.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.GasOffered} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.GasOffered}
 */
proto.spacemesh.v1.GasOffered.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasProvided(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.GasOffered.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.GasOffered.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.GasOffered} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.GasOffered.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGasProvided();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getGasPrice();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 gas_provided = 1;
 * @return {number}
 */
proto.spacemesh.v1.GasOffered.prototype.getGasProvided = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.spacemesh.v1.GasOffered.prototype.setGasProvided = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 gas_price = 2;
 * @return {number}
 */
proto.spacemesh.v1.GasOffered.prototype.getGasPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.spacemesh.v1.GasOffered.prototype.setGasPrice = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.CoinTransferTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.CoinTransferTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.CoinTransferTransaction.displayName = 'proto.spacemesh.v1.CoinTransferTransaction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.CoinTransferTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.CoinTransferTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.CoinTransferTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.CoinTransferTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    receiver: (f = msg.getReceiver()) && proto.spacemesh.v1.AccountId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.CoinTransferTransaction}
 */
proto.spacemesh.v1.CoinTransferTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.CoinTransferTransaction;
  return proto.spacemesh.v1.CoinTransferTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.CoinTransferTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.CoinTransferTransaction}
 */
proto.spacemesh.v1.CoinTransferTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spacemesh.v1.AccountId;
      reader.readMessage(value,proto.spacemesh.v1.AccountId.deserializeBinaryFromReader);
      msg.setReceiver(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.CoinTransferTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.CoinTransferTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.CoinTransferTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.CoinTransferTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceiver();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.spacemesh.v1.AccountId.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccountId receiver = 1;
 * @return {?proto.spacemesh.v1.AccountId}
 */
proto.spacemesh.v1.CoinTransferTransaction.prototype.getReceiver = function() {
  return /** @type{?proto.spacemesh.v1.AccountId} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.AccountId, 1));
};


/** @param {?proto.spacemesh.v1.AccountId|undefined} value */
proto.spacemesh.v1.CoinTransferTransaction.prototype.setReceiver = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.CoinTransferTransaction.prototype.clearReceiver = function() {
  this.setReceiver(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.CoinTransferTransaction.prototype.hasReceiver = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.SmartContractTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.SmartContractTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.SmartContractTransaction.displayName = 'proto.spacemesh.v1.SmartContractTransaction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.SmartContractTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.SmartContractTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.SmartContractTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SmartContractTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    data: msg.getData_asB64(),
    accountId: (f = msg.getAccountId()) && proto.spacemesh.v1.AccountId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.SmartContractTransaction}
 */
proto.spacemesh.v1.SmartContractTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.SmartContractTransaction;
  return proto.spacemesh.v1.SmartContractTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.SmartContractTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.SmartContractTransaction}
 */
proto.spacemesh.v1.SmartContractTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.spacemesh.v1.SmartContractTransaction.TransactionType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 3:
      var value = new proto.spacemesh.v1.AccountId;
      reader.readMessage(value,proto.spacemesh.v1.AccountId.deserializeBinaryFromReader);
      msg.setAccountId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.SmartContractTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.SmartContractTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.SmartContractTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SmartContractTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAccountId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.spacemesh.v1.AccountId.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.spacemesh.v1.SmartContractTransaction.TransactionType = {
  TRANSACTION_TYPE_UNSPECIFIED: 0,
  TRANSACTION_TYPE_APP: 1,
  TRANSACTION_TYPE_APP_SPAWN_APP: 2,
  TRANSACTION_TYPE_DEPLOY_TEMPLATE: 3
};

/**
 * optional TransactionType type = 1;
 * @return {!proto.spacemesh.v1.SmartContractTransaction.TransactionType}
 */
proto.spacemesh.v1.SmartContractTransaction.prototype.getType = function() {
  return /** @type {!proto.spacemesh.v1.SmartContractTransaction.TransactionType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.spacemesh.v1.SmartContractTransaction.TransactionType} value */
proto.spacemesh.v1.SmartContractTransaction.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.spacemesh.v1.SmartContractTransaction.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.spacemesh.v1.SmartContractTransaction.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.SmartContractTransaction.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.spacemesh.v1.SmartContractTransaction.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional AccountId account_id = 3;
 * @return {?proto.spacemesh.v1.AccountId}
 */
proto.spacemesh.v1.SmartContractTransaction.prototype.getAccountId = function() {
  return /** @type{?proto.spacemesh.v1.AccountId} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.AccountId, 3));
};


/** @param {?proto.spacemesh.v1.AccountId|undefined} value */
proto.spacemesh.v1.SmartContractTransaction.prototype.setAccountId = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.spacemesh.v1.SmartContractTransaction.prototype.clearAccountId = function() {
  this.setAccountId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.SmartContractTransaction.prototype.hasAccountId = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.Signature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.Signature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.Signature.displayName = 'proto.spacemesh.v1.Signature';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.Signature.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.Signature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.Signature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Signature.toObject = function(includeInstance, msg) {
  var f, obj = {
    scheme: jspb.Message.getFieldWithDefault(msg, 1, 0),
    signature: msg.getSignature_asB64(),
    publicKey: msg.getPublicKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.Signature}
 */
proto.spacemesh.v1.Signature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.Signature;
  return proto.spacemesh.v1.Signature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.Signature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.Signature}
 */
proto.spacemesh.v1.Signature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.spacemesh.v1.Signature.Scheme} */ (reader.readEnum());
      msg.setScheme(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Signature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.Signature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.Signature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Signature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScheme();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.spacemesh.v1.Signature.Scheme = {
  SCHEME_UNSPECIFIED: 0,
  SCHEME_ED25519: 1,
  SCHEME_ED25519_PLUS_PLUS: 2
};

/**
 * optional Scheme scheme = 1;
 * @return {!proto.spacemesh.v1.Signature.Scheme}
 */
proto.spacemesh.v1.Signature.prototype.getScheme = function() {
  return /** @type {!proto.spacemesh.v1.Signature.Scheme} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.spacemesh.v1.Signature.Scheme} value */
proto.spacemesh.v1.Signature.prototype.setScheme = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.spacemesh.v1.Signature.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.spacemesh.v1.Signature.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Signature.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.spacemesh.v1.Signature.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes public_key = 3;
 * @return {!(string|Uint8Array)}
 */
proto.spacemesh.v1.Signature.prototype.getPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes public_key = 3;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.spacemesh.v1.Signature.prototype.getPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicKey()));
};


/**
 * optional bytes public_key = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Signature.prototype.getPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.spacemesh.v1.Signature.prototype.setPublicKey = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.Activation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.Activation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.Activation.displayName = 'proto.spacemesh.v1.Activation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.Activation.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.Activation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.Activation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Activation.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.spacemesh.v1.ActivationId.toObject(includeInstance, f),
    layer: (f = msg.getLayer()) && proto.spacemesh.v1.LayerNumber.toObject(includeInstance, f),
    smesherId: (f = msg.getSmesherId()) && proto.spacemesh.v1.SmesherId.toObject(includeInstance, f),
    coinbase: (f = msg.getCoinbase()) && proto.spacemesh.v1.AccountId.toObject(includeInstance, f),
    prevAtx: (f = msg.getPrevAtx()) && proto.spacemesh.v1.ActivationId.toObject(includeInstance, f),
    numUnits: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.Activation}
 */
proto.spacemesh.v1.Activation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.Activation;
  return proto.spacemesh.v1.Activation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.Activation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.Activation}
 */
proto.spacemesh.v1.Activation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spacemesh.v1.ActivationId;
      reader.readMessage(value,proto.spacemesh.v1.ActivationId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.spacemesh.v1.LayerNumber;
      reader.readMessage(value,proto.spacemesh.v1.LayerNumber.deserializeBinaryFromReader);
      msg.setLayer(value);
      break;
    case 3:
      var value = new proto.spacemesh.v1.SmesherId;
      reader.readMessage(value,proto.spacemesh.v1.SmesherId.deserializeBinaryFromReader);
      msg.setSmesherId(value);
      break;
    case 4:
      var value = new proto.spacemesh.v1.AccountId;
      reader.readMessage(value,proto.spacemesh.v1.AccountId.deserializeBinaryFromReader);
      msg.setCoinbase(value);
      break;
    case 5:
      var value = new proto.spacemesh.v1.ActivationId;
      reader.readMessage(value,proto.spacemesh.v1.ActivationId.deserializeBinaryFromReader);
      msg.setPrevAtx(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumUnits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Activation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.Activation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.Activation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Activation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.spacemesh.v1.ActivationId.serializeBinaryToWriter
    );
  }
  f = message.getLayer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.spacemesh.v1.LayerNumber.serializeBinaryToWriter
    );
  }
  f = message.getSmesherId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.spacemesh.v1.SmesherId.serializeBinaryToWriter
    );
  }
  f = message.getCoinbase();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.spacemesh.v1.AccountId.serializeBinaryToWriter
    );
  }
  f = message.getPrevAtx();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.spacemesh.v1.ActivationId.serializeBinaryToWriter
    );
  }
  f = message.getNumUnits();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional ActivationId id = 1;
 * @return {?proto.spacemesh.v1.ActivationId}
 */
proto.spacemesh.v1.Activation.prototype.getId = function() {
  return /** @type{?proto.spacemesh.v1.ActivationId} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.ActivationId, 1));
};


/** @param {?proto.spacemesh.v1.ActivationId|undefined} value */
proto.spacemesh.v1.Activation.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.Activation.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.Activation.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LayerNumber layer = 2;
 * @return {?proto.spacemesh.v1.LayerNumber}
 */
proto.spacemesh.v1.Activation.prototype.getLayer = function() {
  return /** @type{?proto.spacemesh.v1.LayerNumber} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.LayerNumber, 2));
};


/** @param {?proto.spacemesh.v1.LayerNumber|undefined} value */
proto.spacemesh.v1.Activation.prototype.setLayer = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.spacemesh.v1.Activation.prototype.clearLayer = function() {
  this.setLayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.Activation.prototype.hasLayer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SmesherId smesher_id = 3;
 * @return {?proto.spacemesh.v1.SmesherId}
 */
proto.spacemesh.v1.Activation.prototype.getSmesherId = function() {
  return /** @type{?proto.spacemesh.v1.SmesherId} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.SmesherId, 3));
};


/** @param {?proto.spacemesh.v1.SmesherId|undefined} value */
proto.spacemesh.v1.Activation.prototype.setSmesherId = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.spacemesh.v1.Activation.prototype.clearSmesherId = function() {
  this.setSmesherId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.Activation.prototype.hasSmesherId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AccountId coinbase = 4;
 * @return {?proto.spacemesh.v1.AccountId}
 */
proto.spacemesh.v1.Activation.prototype.getCoinbase = function() {
  return /** @type{?proto.spacemesh.v1.AccountId} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.AccountId, 4));
};


/** @param {?proto.spacemesh.v1.AccountId|undefined} value */
proto.spacemesh.v1.Activation.prototype.setCoinbase = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.spacemesh.v1.Activation.prototype.clearCoinbase = function() {
  this.setCoinbase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.Activation.prototype.hasCoinbase = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ActivationId prev_atx = 5;
 * @return {?proto.spacemesh.v1.ActivationId}
 */
proto.spacemesh.v1.Activation.prototype.getPrevAtx = function() {
  return /** @type{?proto.spacemesh.v1.ActivationId} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.ActivationId, 5));
};


/** @param {?proto.spacemesh.v1.ActivationId|undefined} value */
proto.spacemesh.v1.Activation.prototype.setPrevAtx = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.spacemesh.v1.Activation.prototype.clearPrevAtx = function() {
  this.setPrevAtx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.Activation.prototype.hasPrevAtx = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 num_units = 6;
 * @return {number}
 */
proto.spacemesh.v1.Activation.prototype.getNumUnits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.spacemesh.v1.Activation.prototype.setNumUnits = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.spacemesh.v1.Transaction.oneofGroups_);
};
goog.inherits(proto.spacemesh.v1.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.Transaction.displayName = 'proto.spacemesh.v1.Transaction';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.spacemesh.v1.Transaction.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.spacemesh.v1.Transaction.DatumCase = {
  DATUM_NOT_SET: 0,
  COIN_TRANSFER: 2,
  SMART_CONTRACT: 3
};

/**
 * @return {proto.spacemesh.v1.Transaction.DatumCase}
 */
proto.spacemesh.v1.Transaction.prototype.getDatumCase = function() {
  return /** @type {proto.spacemesh.v1.Transaction.DatumCase} */(jspb.Message.computeOneofCase(this, proto.spacemesh.v1.Transaction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.spacemesh.v1.TransactionId.toObject(includeInstance, f),
    coinTransfer: (f = msg.getCoinTransfer()) && proto.spacemesh.v1.CoinTransferTransaction.toObject(includeInstance, f),
    smartContract: (f = msg.getSmartContract()) && proto.spacemesh.v1.SmartContractTransaction.toObject(includeInstance, f),
    sender: (f = msg.getSender()) && proto.spacemesh.v1.AccountId.toObject(includeInstance, f),
    gasOffered: (f = msg.getGasOffered()) && proto.spacemesh.v1.GasOffered.toObject(includeInstance, f),
    amount: (f = msg.getAmount()) && proto.spacemesh.v1.Amount.toObject(includeInstance, f),
    counter: jspb.Message.getFieldWithDefault(msg, 7, 0),
    signature: (f = msg.getSignature()) && proto.spacemesh.v1.Signature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.Transaction}
 */
proto.spacemesh.v1.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.Transaction;
  return proto.spacemesh.v1.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.Transaction}
 */
proto.spacemesh.v1.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spacemesh.v1.TransactionId;
      reader.readMessage(value,proto.spacemesh.v1.TransactionId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.spacemesh.v1.CoinTransferTransaction;
      reader.readMessage(value,proto.spacemesh.v1.CoinTransferTransaction.deserializeBinaryFromReader);
      msg.setCoinTransfer(value);
      break;
    case 3:
      var value = new proto.spacemesh.v1.SmartContractTransaction;
      reader.readMessage(value,proto.spacemesh.v1.SmartContractTransaction.deserializeBinaryFromReader);
      msg.setSmartContract(value);
      break;
    case 4:
      var value = new proto.spacemesh.v1.AccountId;
      reader.readMessage(value,proto.spacemesh.v1.AccountId.deserializeBinaryFromReader);
      msg.setSender(value);
      break;
    case 5:
      var value = new proto.spacemesh.v1.GasOffered;
      reader.readMessage(value,proto.spacemesh.v1.GasOffered.deserializeBinaryFromReader);
      msg.setGasOffered(value);
      break;
    case 6:
      var value = new proto.spacemesh.v1.Amount;
      reader.readMessage(value,proto.spacemesh.v1.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCounter(value);
      break;
    case 8:
      var value = new proto.spacemesh.v1.Signature;
      reader.readMessage(value,proto.spacemesh.v1.Signature.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.spacemesh.v1.TransactionId.serializeBinaryToWriter
    );
  }
  f = message.getCoinTransfer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.spacemesh.v1.CoinTransferTransaction.serializeBinaryToWriter
    );
  }
  f = message.getSmartContract();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.spacemesh.v1.SmartContractTransaction.serializeBinaryToWriter
    );
  }
  f = message.getSender();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.spacemesh.v1.AccountId.serializeBinaryToWriter
    );
  }
  f = message.getGasOffered();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.spacemesh.v1.GasOffered.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.spacemesh.v1.Amount.serializeBinaryToWriter
    );
  }
  f = message.getCounter();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.spacemesh.v1.Signature.serializeBinaryToWriter
    );
  }
};


/**
 * optional TransactionId id = 1;
 * @return {?proto.spacemesh.v1.TransactionId}
 */
proto.spacemesh.v1.Transaction.prototype.getId = function() {
  return /** @type{?proto.spacemesh.v1.TransactionId} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.TransactionId, 1));
};


/** @param {?proto.spacemesh.v1.TransactionId|undefined} value */
proto.spacemesh.v1.Transaction.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.Transaction.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.Transaction.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CoinTransferTransaction coin_transfer = 2;
 * @return {?proto.spacemesh.v1.CoinTransferTransaction}
 */
proto.spacemesh.v1.Transaction.prototype.getCoinTransfer = function() {
  return /** @type{?proto.spacemesh.v1.CoinTransferTransaction} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.CoinTransferTransaction, 2));
};


/** @param {?proto.spacemesh.v1.CoinTransferTransaction|undefined} value */
proto.spacemesh.v1.Transaction.prototype.setCoinTransfer = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.spacemesh.v1.Transaction.oneofGroups_[0], value);
};


proto.spacemesh.v1.Transaction.prototype.clearCoinTransfer = function() {
  this.setCoinTransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.Transaction.prototype.hasCoinTransfer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SmartContractTransaction smart_contract = 3;
 * @return {?proto.spacemesh.v1.SmartContractTransaction}
 */
proto.spacemesh.v1.Transaction.prototype.getSmartContract = function() {
  return /** @type{?proto.spacemesh.v1.SmartContractTransaction} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.SmartContractTransaction, 3));
};


/** @param {?proto.spacemesh.v1.SmartContractTransaction|undefined} value */
proto.spacemesh.v1.Transaction.prototype.setSmartContract = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.spacemesh.v1.Transaction.oneofGroups_[0], value);
};


proto.spacemesh.v1.Transaction.prototype.clearSmartContract = function() {
  this.setSmartContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.Transaction.prototype.hasSmartContract = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AccountId sender = 4;
 * @return {?proto.spacemesh.v1.AccountId}
 */
proto.spacemesh.v1.Transaction.prototype.getSender = function() {
  return /** @type{?proto.spacemesh.v1.AccountId} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.AccountId, 4));
};


/** @param {?proto.spacemesh.v1.AccountId|undefined} value */
proto.spacemesh.v1.Transaction.prototype.setSender = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.spacemesh.v1.Transaction.prototype.clearSender = function() {
  this.setSender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.Transaction.prototype.hasSender = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional GasOffered gas_offered = 5;
 * @return {?proto.spacemesh.v1.GasOffered}
 */
proto.spacemesh.v1.Transaction.prototype.getGasOffered = function() {
  return /** @type{?proto.spacemesh.v1.GasOffered} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.GasOffered, 5));
};


/** @param {?proto.spacemesh.v1.GasOffered|undefined} value */
proto.spacemesh.v1.Transaction.prototype.setGasOffered = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.spacemesh.v1.Transaction.prototype.clearGasOffered = function() {
  this.setGasOffered(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.Transaction.prototype.hasGasOffered = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Amount amount = 6;
 * @return {?proto.spacemesh.v1.Amount}
 */
proto.spacemesh.v1.Transaction.prototype.getAmount = function() {
  return /** @type{?proto.spacemesh.v1.Amount} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.Amount, 6));
};


/** @param {?proto.spacemesh.v1.Amount|undefined} value */
proto.spacemesh.v1.Transaction.prototype.setAmount = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.spacemesh.v1.Transaction.prototype.clearAmount = function() {
  this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.Transaction.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint64 counter = 7;
 * @return {number}
 */
proto.spacemesh.v1.Transaction.prototype.getCounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.spacemesh.v1.Transaction.prototype.setCounter = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional Signature signature = 8;
 * @return {?proto.spacemesh.v1.Signature}
 */
proto.spacemesh.v1.Transaction.prototype.getSignature = function() {
  return /** @type{?proto.spacemesh.v1.Signature} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.Signature, 8));
};


/** @param {?proto.spacemesh.v1.Signature|undefined} value */
proto.spacemesh.v1.Transaction.prototype.setSignature = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.spacemesh.v1.Transaction.prototype.clearSignature = function() {
  this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.Transaction.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.MeshTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.MeshTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.MeshTransaction.displayName = 'proto.spacemesh.v1.MeshTransaction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.MeshTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.MeshTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.MeshTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.MeshTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    transaction: (f = msg.getTransaction()) && proto.spacemesh.v1.Transaction.toObject(includeInstance, f),
    layerId: (f = msg.getLayerId()) && proto.spacemesh.v1.LayerNumber.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.MeshTransaction}
 */
proto.spacemesh.v1.MeshTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.MeshTransaction;
  return proto.spacemesh.v1.MeshTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.MeshTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.MeshTransaction}
 */
proto.spacemesh.v1.MeshTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spacemesh.v1.Transaction;
      reader.readMessage(value,proto.spacemesh.v1.Transaction.deserializeBinaryFromReader);
      msg.setTransaction(value);
      break;
    case 2:
      var value = new proto.spacemesh.v1.LayerNumber;
      reader.readMessage(value,proto.spacemesh.v1.LayerNumber.deserializeBinaryFromReader);
      msg.setLayerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.MeshTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.MeshTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.MeshTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.MeshTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransaction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.spacemesh.v1.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getLayerId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.spacemesh.v1.LayerNumber.serializeBinaryToWriter
    );
  }
};


/**
 * optional Transaction transaction = 1;
 * @return {?proto.spacemesh.v1.Transaction}
 */
proto.spacemesh.v1.MeshTransaction.prototype.getTransaction = function() {
  return /** @type{?proto.spacemesh.v1.Transaction} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.Transaction, 1));
};


/** @param {?proto.spacemesh.v1.Transaction|undefined} value */
proto.spacemesh.v1.MeshTransaction.prototype.setTransaction = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.MeshTransaction.prototype.clearTransaction = function() {
  this.setTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.MeshTransaction.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LayerNumber layer_id = 2;
 * @return {?proto.spacemesh.v1.LayerNumber}
 */
proto.spacemesh.v1.MeshTransaction.prototype.getLayerId = function() {
  return /** @type{?proto.spacemesh.v1.LayerNumber} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.LayerNumber, 2));
};


/** @param {?proto.spacemesh.v1.LayerNumber|undefined} value */
proto.spacemesh.v1.MeshTransaction.prototype.setLayerId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.spacemesh.v1.MeshTransaction.prototype.clearLayerId = function() {
  this.setLayerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.MeshTransaction.prototype.hasLayerId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.Reward = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.Reward, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.Reward.displayName = 'proto.spacemesh.v1.Reward';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.Reward.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.Reward.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.Reward} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Reward.toObject = function(includeInstance, msg) {
  var f, obj = {
    layer: (f = msg.getLayer()) && proto.spacemesh.v1.LayerNumber.toObject(includeInstance, f),
    total: (f = msg.getTotal()) && proto.spacemesh.v1.Amount.toObject(includeInstance, f),
    layerReward: (f = msg.getLayerReward()) && proto.spacemesh.v1.Amount.toObject(includeInstance, f),
    layerComputed: (f = msg.getLayerComputed()) && proto.spacemesh.v1.LayerNumber.toObject(includeInstance, f),
    coinbase: (f = msg.getCoinbase()) && proto.spacemesh.v1.AccountId.toObject(includeInstance, f),
    smesher: (f = msg.getSmesher()) && proto.spacemesh.v1.SmesherId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.Reward}
 */
proto.spacemesh.v1.Reward.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.Reward;
  return proto.spacemesh.v1.Reward.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.Reward} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.Reward}
 */
proto.spacemesh.v1.Reward.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spacemesh.v1.LayerNumber;
      reader.readMessage(value,proto.spacemesh.v1.LayerNumber.deserializeBinaryFromReader);
      msg.setLayer(value);
      break;
    case 2:
      var value = new proto.spacemesh.v1.Amount;
      reader.readMessage(value,proto.spacemesh.v1.Amount.deserializeBinaryFromReader);
      msg.setTotal(value);
      break;
    case 3:
      var value = new proto.spacemesh.v1.Amount;
      reader.readMessage(value,proto.spacemesh.v1.Amount.deserializeBinaryFromReader);
      msg.setLayerReward(value);
      break;
    case 4:
      var value = new proto.spacemesh.v1.LayerNumber;
      reader.readMessage(value,proto.spacemesh.v1.LayerNumber.deserializeBinaryFromReader);
      msg.setLayerComputed(value);
      break;
    case 5:
      var value = new proto.spacemesh.v1.AccountId;
      reader.readMessage(value,proto.spacemesh.v1.AccountId.deserializeBinaryFromReader);
      msg.setCoinbase(value);
      break;
    case 6:
      var value = new proto.spacemesh.v1.SmesherId;
      reader.readMessage(value,proto.spacemesh.v1.SmesherId.deserializeBinaryFromReader);
      msg.setSmesher(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Reward.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.Reward.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.Reward} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Reward.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLayer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.spacemesh.v1.LayerNumber.serializeBinaryToWriter
    );
  }
  f = message.getTotal();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.spacemesh.v1.Amount.serializeBinaryToWriter
    );
  }
  f = message.getLayerReward();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.spacemesh.v1.Amount.serializeBinaryToWriter
    );
  }
  f = message.getLayerComputed();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.spacemesh.v1.LayerNumber.serializeBinaryToWriter
    );
  }
  f = message.getCoinbase();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.spacemesh.v1.AccountId.serializeBinaryToWriter
    );
  }
  f = message.getSmesher();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.spacemesh.v1.SmesherId.serializeBinaryToWriter
    );
  }
};


/**
 * optional LayerNumber layer = 1;
 * @return {?proto.spacemesh.v1.LayerNumber}
 */
proto.spacemesh.v1.Reward.prototype.getLayer = function() {
  return /** @type{?proto.spacemesh.v1.LayerNumber} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.LayerNumber, 1));
};


/** @param {?proto.spacemesh.v1.LayerNumber|undefined} value */
proto.spacemesh.v1.Reward.prototype.setLayer = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.Reward.prototype.clearLayer = function() {
  this.setLayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.Reward.prototype.hasLayer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Amount total = 2;
 * @return {?proto.spacemesh.v1.Amount}
 */
proto.spacemesh.v1.Reward.prototype.getTotal = function() {
  return /** @type{?proto.spacemesh.v1.Amount} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.Amount, 2));
};


/** @param {?proto.spacemesh.v1.Amount|undefined} value */
proto.spacemesh.v1.Reward.prototype.setTotal = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.spacemesh.v1.Reward.prototype.clearTotal = function() {
  this.setTotal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.Reward.prototype.hasTotal = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Amount layer_reward = 3;
 * @return {?proto.spacemesh.v1.Amount}
 */
proto.spacemesh.v1.Reward.prototype.getLayerReward = function() {
  return /** @type{?proto.spacemesh.v1.Amount} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.Amount, 3));
};


/** @param {?proto.spacemesh.v1.Amount|undefined} value */
proto.spacemesh.v1.Reward.prototype.setLayerReward = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.spacemesh.v1.Reward.prototype.clearLayerReward = function() {
  this.setLayerReward(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.Reward.prototype.hasLayerReward = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LayerNumber layer_computed = 4;
 * @return {?proto.spacemesh.v1.LayerNumber}
 */
proto.spacemesh.v1.Reward.prototype.getLayerComputed = function() {
  return /** @type{?proto.spacemesh.v1.LayerNumber} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.LayerNumber, 4));
};


/** @param {?proto.spacemesh.v1.LayerNumber|undefined} value */
proto.spacemesh.v1.Reward.prototype.setLayerComputed = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.spacemesh.v1.Reward.prototype.clearLayerComputed = function() {
  this.setLayerComputed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.Reward.prototype.hasLayerComputed = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional AccountId coinbase = 5;
 * @return {?proto.spacemesh.v1.AccountId}
 */
proto.spacemesh.v1.Reward.prototype.getCoinbase = function() {
  return /** @type{?proto.spacemesh.v1.AccountId} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.AccountId, 5));
};


/** @param {?proto.spacemesh.v1.AccountId|undefined} value */
proto.spacemesh.v1.Reward.prototype.setCoinbase = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.spacemesh.v1.Reward.prototype.clearCoinbase = function() {
  this.setCoinbase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.Reward.prototype.hasCoinbase = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SmesherId smesher = 6;
 * @return {?proto.spacemesh.v1.SmesherId}
 */
proto.spacemesh.v1.Reward.prototype.getSmesher = function() {
  return /** @type{?proto.spacemesh.v1.SmesherId} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.SmesherId, 6));
};


/** @param {?proto.spacemesh.v1.SmesherId|undefined} value */
proto.spacemesh.v1.Reward.prototype.setSmesher = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.spacemesh.v1.Reward.prototype.clearSmesher = function() {
  this.setSmesher(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.Reward.prototype.hasSmesher = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.spacemesh.v1.Block.repeatedFields_, null);
};
goog.inherits(proto.spacemesh.v1.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.Block.displayName = 'proto.spacemesh.v1.Block';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.spacemesh.v1.Block.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.spacemesh.v1.Transaction.toObject, includeInstance),
    activationId: (f = msg.getActivationId()) && proto.spacemesh.v1.ActivationId.toObject(includeInstance, f),
    smesherId: (f = msg.getSmesherId()) && proto.spacemesh.v1.SmesherId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.Block}
 */
proto.spacemesh.v1.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.Block;
  return proto.spacemesh.v1.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.Block}
 */
proto.spacemesh.v1.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.spacemesh.v1.Transaction;
      reader.readMessage(value,proto.spacemesh.v1.Transaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    case 3:
      var value = new proto.spacemesh.v1.ActivationId;
      reader.readMessage(value,proto.spacemesh.v1.ActivationId.deserializeBinaryFromReader);
      msg.setActivationId(value);
      break;
    case 4:
      var value = new proto.spacemesh.v1.SmesherId;
      reader.readMessage(value,proto.spacemesh.v1.SmesherId.deserializeBinaryFromReader);
      msg.setSmesherId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.spacemesh.v1.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getActivationId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.spacemesh.v1.ActivationId.serializeBinaryToWriter
    );
  }
  f = message.getSmesherId();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.spacemesh.v1.SmesherId.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.spacemesh.v1.Block.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.spacemesh.v1.Block.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Block.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/** @param {!(string|Uint8Array)} value */
proto.spacemesh.v1.Block.prototype.setId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated Transaction transactions = 2;
 * @return {!Array<!proto.spacemesh.v1.Transaction>}
 */
proto.spacemesh.v1.Block.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.spacemesh.v1.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.spacemesh.v1.Transaction, 2));
};


/** @param {!Array<!proto.spacemesh.v1.Transaction>} value */
proto.spacemesh.v1.Block.prototype.setTransactionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.spacemesh.v1.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.spacemesh.v1.Transaction}
 */
proto.spacemesh.v1.Block.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.spacemesh.v1.Transaction, opt_index);
};


proto.spacemesh.v1.Block.prototype.clearTransactionsList = function() {
  this.setTransactionsList([]);
};


/**
 * optional ActivationId activation_id = 3;
 * @return {?proto.spacemesh.v1.ActivationId}
 */
proto.spacemesh.v1.Block.prototype.getActivationId = function() {
  return /** @type{?proto.spacemesh.v1.ActivationId} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.ActivationId, 3));
};


/** @param {?proto.spacemesh.v1.ActivationId|undefined} value */
proto.spacemesh.v1.Block.prototype.setActivationId = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.spacemesh.v1.Block.prototype.clearActivationId = function() {
  this.setActivationId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.Block.prototype.hasActivationId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SmesherId smesher_id = 4;
 * @return {?proto.spacemesh.v1.SmesherId}
 */
proto.spacemesh.v1.Block.prototype.getSmesherId = function() {
  return /** @type{?proto.spacemesh.v1.SmesherId} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.SmesherId, 4));
};


/** @param {?proto.spacemesh.v1.SmesherId|undefined} value */
proto.spacemesh.v1.Block.prototype.setSmesherId = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.spacemesh.v1.Block.prototype.clearSmesherId = function() {
  this.setSmesherId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.Block.prototype.hasSmesherId = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.Layer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.spacemesh.v1.Layer.repeatedFields_, null);
};
goog.inherits(proto.spacemesh.v1.Layer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.Layer.displayName = 'proto.spacemesh.v1.Layer';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.spacemesh.v1.Layer.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.Layer.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.Layer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.Layer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Layer.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: (f = msg.getNumber()) && proto.spacemesh.v1.LayerNumber.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hash: msg.getHash_asB64(),
    blocksList: jspb.Message.toObjectList(msg.getBlocksList(),
    proto.spacemesh.v1.Block.toObject, includeInstance),
    activationsList: jspb.Message.toObjectList(msg.getActivationsList(),
    proto.spacemesh.v1.Activation.toObject, includeInstance),
    rootStateHash: msg.getRootStateHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.Layer}
 */
proto.spacemesh.v1.Layer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.Layer;
  return proto.spacemesh.v1.Layer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.Layer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.Layer}
 */
proto.spacemesh.v1.Layer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spacemesh.v1.LayerNumber;
      reader.readMessage(value,proto.spacemesh.v1.LayerNumber.deserializeBinaryFromReader);
      msg.setNumber(value);
      break;
    case 2:
      var value = /** @type {!proto.spacemesh.v1.Layer.LayerStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 4:
      var value = new proto.spacemesh.v1.Block;
      reader.readMessage(value,proto.spacemesh.v1.Block.deserializeBinaryFromReader);
      msg.addBlocks(value);
      break;
    case 5:
      var value = new proto.spacemesh.v1.Activation;
      reader.readMessage(value,proto.spacemesh.v1.Activation.deserializeBinaryFromReader);
      msg.addActivations(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRootStateHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Layer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.Layer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.Layer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Layer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.spacemesh.v1.LayerNumber.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.spacemesh.v1.Block.serializeBinaryToWriter
    );
  }
  f = message.getActivationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.spacemesh.v1.Activation.serializeBinaryToWriter
    );
  }
  f = message.getRootStateHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.spacemesh.v1.Layer.LayerStatus = {
  LAYER_STATUS_UNSPECIFIED: 0,
  LAYER_STATUS_APPROVED: 1,
  LAYER_STATUS_CONFIRMED: 2
};

/**
 * optional LayerNumber number = 1;
 * @return {?proto.spacemesh.v1.LayerNumber}
 */
proto.spacemesh.v1.Layer.prototype.getNumber = function() {
  return /** @type{?proto.spacemesh.v1.LayerNumber} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.LayerNumber, 1));
};


/** @param {?proto.spacemesh.v1.LayerNumber|undefined} value */
proto.spacemesh.v1.Layer.prototype.setNumber = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.Layer.prototype.clearNumber = function() {
  this.setNumber(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.Layer.prototype.hasNumber = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LayerStatus status = 2;
 * @return {!proto.spacemesh.v1.Layer.LayerStatus}
 */
proto.spacemesh.v1.Layer.prototype.getStatus = function() {
  return /** @type {!proto.spacemesh.v1.Layer.LayerStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.spacemesh.v1.Layer.LayerStatus} value */
proto.spacemesh.v1.Layer.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bytes hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.spacemesh.v1.Layer.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes hash = 3;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.spacemesh.v1.Layer.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Layer.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.spacemesh.v1.Layer.prototype.setHash = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated Block blocks = 4;
 * @return {!Array<!proto.spacemesh.v1.Block>}
 */
proto.spacemesh.v1.Layer.prototype.getBlocksList = function() {
  return /** @type{!Array<!proto.spacemesh.v1.Block>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.spacemesh.v1.Block, 4));
};


/** @param {!Array<!proto.spacemesh.v1.Block>} value */
proto.spacemesh.v1.Layer.prototype.setBlocksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.spacemesh.v1.Block=} opt_value
 * @param {number=} opt_index
 * @return {!proto.spacemesh.v1.Block}
 */
proto.spacemesh.v1.Layer.prototype.addBlocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.spacemesh.v1.Block, opt_index);
};


proto.spacemesh.v1.Layer.prototype.clearBlocksList = function() {
  this.setBlocksList([]);
};


/**
 * repeated Activation activations = 5;
 * @return {!Array<!proto.spacemesh.v1.Activation>}
 */
proto.spacemesh.v1.Layer.prototype.getActivationsList = function() {
  return /** @type{!Array<!proto.spacemesh.v1.Activation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.spacemesh.v1.Activation, 5));
};


/** @param {!Array<!proto.spacemesh.v1.Activation>} value */
proto.spacemesh.v1.Layer.prototype.setActivationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.spacemesh.v1.Activation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.spacemesh.v1.Activation}
 */
proto.spacemesh.v1.Layer.prototype.addActivations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.spacemesh.v1.Activation, opt_index);
};


proto.spacemesh.v1.Layer.prototype.clearActivationsList = function() {
  this.setActivationsList([]);
};


/**
 * optional bytes root_state_hash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.spacemesh.v1.Layer.prototype.getRootStateHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes root_state_hash = 6;
 * This is a type-conversion wrapper around `getRootStateHash()`
 * @return {string}
 */
proto.spacemesh.v1.Layer.prototype.getRootStateHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRootStateHash()));
};


/**
 * optional bytes root_state_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRootStateHash()`
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Layer.prototype.getRootStateHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRootStateHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.spacemesh.v1.Layer.prototype.setRootStateHash = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.LayerNumber = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.LayerNumber, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.LayerNumber.displayName = 'proto.spacemesh.v1.LayerNumber';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.LayerNumber.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.LayerNumber.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.LayerNumber} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.LayerNumber.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.LayerNumber}
 */
proto.spacemesh.v1.LayerNumber.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.LayerNumber;
  return proto.spacemesh.v1.LayerNumber.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.LayerNumber} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.LayerNumber}
 */
proto.spacemesh.v1.LayerNumber.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.LayerNumber.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.LayerNumber.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.LayerNumber} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.LayerNumber.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 number = 1;
 * @return {number}
 */
proto.spacemesh.v1.LayerNumber.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.spacemesh.v1.LayerNumber.prototype.setNumber = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.AppEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.AppEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.AppEvent.displayName = 'proto.spacemesh.v1.AppEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.AppEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.AppEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.AppEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AppEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionId: (f = msg.getTransactionId()) && proto.spacemesh.v1.TransactionId.toObject(includeInstance, f),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.AppEvent}
 */
proto.spacemesh.v1.AppEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.AppEvent;
  return proto.spacemesh.v1.AppEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.AppEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.AppEvent}
 */
proto.spacemesh.v1.AppEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spacemesh.v1.TransactionId;
      reader.readMessage(value,proto.spacemesh.v1.TransactionId.deserializeBinaryFromReader);
      msg.setTransactionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.AppEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.AppEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.AppEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AppEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.spacemesh.v1.TransactionId.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional TransactionId transaction_id = 1;
 * @return {?proto.spacemesh.v1.TransactionId}
 */
proto.spacemesh.v1.AppEvent.prototype.getTransactionId = function() {
  return /** @type{?proto.spacemesh.v1.TransactionId} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.TransactionId, 1));
};


/** @param {?proto.spacemesh.v1.TransactionId|undefined} value */
proto.spacemesh.v1.AppEvent.prototype.setTransactionId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.AppEvent.prototype.clearTransactionId = function() {
  this.setTransactionId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.AppEvent.prototype.hasTransactionId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.spacemesh.v1.AppEvent.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.spacemesh.v1.AppEvent.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.spacemesh.v1);
