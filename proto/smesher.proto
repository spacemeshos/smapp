syntax = "proto3";
package spacemesh.v1;
option go_package = "github.com/spacemeshos/api/release/go/spacemesh/v1";
import "google/protobuf/empty.proto";
import "smesher_types.proto";

service SmesherService {
    // Returns true iff node is currently smeshing
    rpc IsSmeshing (google.protobuf.Empty) returns (IsSmeshingResponse) {
        option (google.api.http) = {
            post: "/v1/smesher/issmeshing"
        };
    }

    // Starts smeshing, after completing the post setup.
    // Changing of the post setup options (e.g., number of units), after initial setup, is supported.
    // Returns success if request is accepted by node , failure if it fails
    rpc StartSmeshing (StartSmeshingRequest) returns (StartSmeshingResponse) {
        option (google.api.http) = {
            post: "/v1/smesher/startsmeshing"
            body: "*"
        };
    }

    // Stops smeshing, or the preceding post setup session, and optionally attempt to
    // delete the post setup data files(s).
    // Returns success if request is accepted by node, failure if it fails
    rpc StopSmeshing (StopSmeshingRequest) returns (StopSmeshingResponse) {
        option (google.api.http) = {
            post: "/v1/smesher/stopsmeshing"
            body: "*"
        };
    }

    // Get the current smesher id generated by the node
    rpc SmesherID (google.protobuf.Empty) returns (SmesherIDResponse) {
        option (google.api.http) = {
            post: "/v1/smesher/smesherid"
        };
        option deprecated = true; // will return empty response in v1.4.x
    }

    // Get the Smesher IDs managed by the node
    rpc SmesherIDs (google.protobuf.Empty) returns (SmesherIDsResponse) {
        option (google.api.http) = {
            post: "/v1/smesher/smesherids"
        };
    }

    // Get the current coinbase
    rpc Coinbase (google.protobuf.Empty) returns (CoinbaseResponse) {
        option (google.api.http) = {
            post: "/v1/smesher/coinbase"
        };
    }

    // Set the coinbase
    // Returns success if request succeeds, failure if it fails
    rpc SetCoinbase (SetCoinbaseRequest) returns (SetCoinbaseResponse) {
        option (google.api.http) = {
            post: "/v1/smesher/setcoinbase"
            body: "*"
        };
    }

    // Get the current min gas for including txs in blocks by this smesher
    rpc MinGas (google.protobuf.Empty) returns (MinGasResponse) {
        option (google.api.http) = {
            post: "/v1/smesher/mingas"
        };
    }

    // Set a min gas units for including txs in blocks by this smesher
    // Returns success if request succeeds, failure if it fails
    rpc SetMinGas (SetMinGasRequest) returns (SetMinGasResponse) {
        option (google.api.http) = {
            post: "/v1/smesher/setmingas"
            body: "*"
        };
    }

    // Estimate smeshing rewards over the next upcoming epoch
    rpc EstimatedRewards (EstimatedRewardsRequest) returns (EstimatedRewardsResponse) {
        option (google.api.http) = {
            post: "/v1/smesher/estimatedrewards"
            body: "*"
        };
    }

    // Returns the Post setup status
    rpc PostSetupStatus (google.protobuf.Empty) returns (PostSetupStatusResponse) {
        option (google.api.http) = {
            post: "/v1/smesher/postsetupstatus"
        };
    }

    // Returns a stream of updates for the Post setup status
    rpc PostSetupStatusStream (google.protobuf.Empty) returns (stream PostSetupStatusStreamResponse);

    // Returns a list of available Post setup providers
    rpc PostSetupProviders (PostSetupProvidersRequest) returns (PostSetupProvidersResponse) {
        option (google.api.http) = {
            post: "/v1/smesher/postsetupproviders"
            body: "*"
        };
    }

    // Returns the Post protocol config
    rpc PostConfig (google.protobuf.Empty) returns (PostConfigResponse) {
        option (google.api.http) = {
            post: "/v1/smesher/postconfig"
            body: "*"
        };
    }
}
