syntax = "proto3";
package spacemesh.v1;
option go_package = "github.com/spacemeshos/api/release/go/spacemesh/v1";

message SimpleInt {
    uint64 value = 1;
}

message SimpleString {
    string value = 1;
}

// A non-negative coin amount, in smidge
message Amount {
    uint64 value = 1;
}

message AccountId {
    string address = 1;
}

message TransactionId {
    bytes id = 1;
}

message ActivationId {
    bytes id = 1;
}

message SmesherId {
    bytes id = 1;
}

// An Activation "transaction" (ATX)
message Activation {
    ActivationId id = 1;
    LayerNumber layer = 2; // the layer that this activation is part of
    SmesherId smesher_id = 3; // id of smesher who created the ATX
    AccountId coinbase = 4; // coinbase account id
    ActivationId prev_atx = 5; // previous ATX pointed to
    uint32 num_units = 6; // number of PoST data commitment units
}

// An immutable Spacemesh transaction.
// do not include mutable data such as tx state or result.
message Transaction {
    bytes id = 1;
    AccountId principal = 2;
    AccountId template = 3;
    uint32 method = 4; // this is actually limited by uint8, but no type for that.
    Nonce nonce = 5;
    LayerLimits limits = 6;
    uint64 max_gas = 7;
    uint64 gas_price = 8;
    uint64 max_spend = 9;
    bytes raw = 10;
}

message LayerLimits {
    uint32 min = 1;
    uint32 max = 2;
}

message Nonce {
    uint64 counter = 1;
    uint32 bitfield = 2; // this is actually limited by uint8, but no type for that.
}


// Transaction that was added to the mesh.
message MeshTransaction {
    Transaction transaction = 1;
    LayerNumber layer_id     = 2;
}

message Reward {
    LayerNumber layer = 1; // layer award was paid in
    Amount total = 2; // total reward paid (sum of tx fee and layer reward)
    Amount layer_reward = 3; // tx_fee = total - layer_reward
    LayerNumber layer_computed = 4; // layer number of the layer when reward was computed
    AccountId coinbase = 5; // account awarded this reward
    SmesherId smesher = 6;  // id of smesher who earned this reward
}

message Block {
    bytes id = 1; // block hash
    repeated Transaction transactions = 2; // block transactions
    ActivationId activation_id = 3; // the smesher's activation that this block refers to
    SmesherId smesher_id = 4; // the id of the smesher who submitted this block
}

message Layer {
    LayerNumber number = 1; // layer number - not hash - layer content may change
    enum LayerStatus {
        LAYER_STATUS_UNSPECIFIED = 0; // not yet approved or confirmed
        LAYER_STATUS_APPROVED = 1; // approved by hare
        LAYER_STATUS_CONFIRMED = 2; // confirmed by tortoise
        LAYER_STATUS_APPLIED = 3; // applied in state
    }
    LayerStatus status = 2;
    bytes hash = 3; // computer layer hash - do we need this?
    repeated Block blocks = 4; // layer's blocks
    repeated Activation activations = 5; // list of layer's activations
    bytes root_state_hash = 6; // when available - the root state hash of global state in this layer
}

message LayerNumber {
    uint32 number = 1;
}

message AppEvent { // an event emitted from an app instance
    TransactionId transaction_id = 1; // the transaction that called the code
    string message = 2; // the event's string emitted from code
}
