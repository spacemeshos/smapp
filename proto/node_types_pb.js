/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var types_pb = require('./types_pb.js');
var google_rpc_status_pb = require('./google/rpc/status_pb.js');
goog.exportSymbol('proto.spacemesh.v1.BuildResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.EchoRequest', null, global);
goog.exportSymbol('proto.spacemesh.v1.EchoResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.ErrorStreamRequest', null, global);
goog.exportSymbol('proto.spacemesh.v1.ErrorStreamResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.LogLevel', null, global);
goog.exportSymbol('proto.spacemesh.v1.NodeError', null, global);
goog.exportSymbol('proto.spacemesh.v1.NodeStatus', null, global);
goog.exportSymbol('proto.spacemesh.v1.ShutdownRequest', null, global);
goog.exportSymbol('proto.spacemesh.v1.ShutdownResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.StatusRequest', null, global);
goog.exportSymbol('proto.spacemesh.v1.StatusResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.StatusStreamRequest', null, global);
goog.exportSymbol('proto.spacemesh.v1.StatusStreamResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.SyncStartRequest', null, global);
goog.exportSymbol('proto.spacemesh.v1.SyncStartResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.VersionResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.EchoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.EchoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.EchoRequest.displayName = 'proto.spacemesh.v1.EchoRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.EchoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.EchoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.EchoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.EchoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    msg: (f = msg.getMsg()) && types_pb.SimpleString.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.EchoRequest}
 */
proto.spacemesh.v1.EchoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.EchoRequest;
  return proto.spacemesh.v1.EchoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.EchoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.EchoRequest}
 */
proto.spacemesh.v1.EchoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_pb.SimpleString;
      reader.readMessage(value,types_pb.SimpleString.deserializeBinaryFromReader);
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.EchoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.EchoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.EchoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.EchoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsg();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_pb.SimpleString.serializeBinaryToWriter
    );
  }
};


/**
 * optional SimpleString msg = 1;
 * @return {?proto.spacemesh.v1.SimpleString}
 */
proto.spacemesh.v1.EchoRequest.prototype.getMsg = function() {
  return /** @type{?proto.spacemesh.v1.SimpleString} */ (
    jspb.Message.getWrapperField(this, types_pb.SimpleString, 1));
};


/** @param {?proto.spacemesh.v1.SimpleString|undefined} value */
proto.spacemesh.v1.EchoRequest.prototype.setMsg = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.EchoRequest.prototype.clearMsg = function() {
  this.setMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.EchoRequest.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.EchoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.EchoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.EchoResponse.displayName = 'proto.spacemesh.v1.EchoResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.EchoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.EchoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.EchoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.EchoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    msg: (f = msg.getMsg()) && types_pb.SimpleString.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.EchoResponse}
 */
proto.spacemesh.v1.EchoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.EchoResponse;
  return proto.spacemesh.v1.EchoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.EchoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.EchoResponse}
 */
proto.spacemesh.v1.EchoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_pb.SimpleString;
      reader.readMessage(value,types_pb.SimpleString.deserializeBinaryFromReader);
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.EchoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.EchoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.EchoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.EchoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsg();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_pb.SimpleString.serializeBinaryToWriter
    );
  }
};


/**
 * optional SimpleString msg = 1;
 * @return {?proto.spacemesh.v1.SimpleString}
 */
proto.spacemesh.v1.EchoResponse.prototype.getMsg = function() {
  return /** @type{?proto.spacemesh.v1.SimpleString} */ (
    jspb.Message.getWrapperField(this, types_pb.SimpleString, 1));
};


/** @param {?proto.spacemesh.v1.SimpleString|undefined} value */
proto.spacemesh.v1.EchoResponse.prototype.setMsg = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.EchoResponse.prototype.clearMsg = function() {
  this.setMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.EchoResponse.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.VersionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.VersionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.VersionResponse.displayName = 'proto.spacemesh.v1.VersionResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.VersionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.VersionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.VersionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.VersionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    versionString: (f = msg.getVersionString()) && types_pb.SimpleString.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.VersionResponse}
 */
proto.spacemesh.v1.VersionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.VersionResponse;
  return proto.spacemesh.v1.VersionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.VersionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.VersionResponse}
 */
proto.spacemesh.v1.VersionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_pb.SimpleString;
      reader.readMessage(value,types_pb.SimpleString.deserializeBinaryFromReader);
      msg.setVersionString(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.VersionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.VersionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.VersionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.VersionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersionString();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_pb.SimpleString.serializeBinaryToWriter
    );
  }
};


/**
 * optional SimpleString version_string = 1;
 * @return {?proto.spacemesh.v1.SimpleString}
 */
proto.spacemesh.v1.VersionResponse.prototype.getVersionString = function() {
  return /** @type{?proto.spacemesh.v1.SimpleString} */ (
    jspb.Message.getWrapperField(this, types_pb.SimpleString, 1));
};


/** @param {?proto.spacemesh.v1.SimpleString|undefined} value */
proto.spacemesh.v1.VersionResponse.prototype.setVersionString = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.VersionResponse.prototype.clearVersionString = function() {
  this.setVersionString(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.VersionResponse.prototype.hasVersionString = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.BuildResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.BuildResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.BuildResponse.displayName = 'proto.spacemesh.v1.BuildResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.BuildResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.BuildResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.BuildResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.BuildResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    buildString: (f = msg.getBuildString()) && types_pb.SimpleString.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.BuildResponse}
 */
proto.spacemesh.v1.BuildResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.BuildResponse;
  return proto.spacemesh.v1.BuildResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.BuildResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.BuildResponse}
 */
proto.spacemesh.v1.BuildResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_pb.SimpleString;
      reader.readMessage(value,types_pb.SimpleString.deserializeBinaryFromReader);
      msg.setBuildString(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.BuildResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.BuildResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.BuildResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.BuildResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBuildString();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_pb.SimpleString.serializeBinaryToWriter
    );
  }
};


/**
 * optional SimpleString build_string = 1;
 * @return {?proto.spacemesh.v1.SimpleString}
 */
proto.spacemesh.v1.BuildResponse.prototype.getBuildString = function() {
  return /** @type{?proto.spacemesh.v1.SimpleString} */ (
    jspb.Message.getWrapperField(this, types_pb.SimpleString, 1));
};


/** @param {?proto.spacemesh.v1.SimpleString|undefined} value */
proto.spacemesh.v1.BuildResponse.prototype.setBuildString = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.BuildResponse.prototype.clearBuildString = function() {
  this.setBuildString(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.BuildResponse.prototype.hasBuildString = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.SyncStartRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.SyncStartRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.SyncStartRequest.displayName = 'proto.spacemesh.v1.SyncStartRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.SyncStartRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.SyncStartRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.SyncStartRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SyncStartRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.SyncStartRequest}
 */
proto.spacemesh.v1.SyncStartRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.SyncStartRequest;
  return proto.spacemesh.v1.SyncStartRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.SyncStartRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.SyncStartRequest}
 */
proto.spacemesh.v1.SyncStartRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.SyncStartRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.SyncStartRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.SyncStartRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SyncStartRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.SyncStartResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.SyncStartResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.SyncStartResponse.displayName = 'proto.spacemesh.v1.SyncStartResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.SyncStartResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.SyncStartResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.SyncStartResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SyncStartResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && google_rpc_status_pb.Status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.SyncStartResponse}
 */
proto.spacemesh.v1.SyncStartResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.SyncStartResponse;
  return proto.spacemesh.v1.SyncStartResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.SyncStartResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.SyncStartResponse}
 */
proto.spacemesh.v1.SyncStartResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_rpc_status_pb.Status;
      reader.readMessage(value,google_rpc_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.SyncStartResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.SyncStartResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.SyncStartResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SyncStartResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_rpc_status_pb.Status.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.rpc.Status status = 1;
 * @return {?proto.google.rpc.Status}
 */
proto.spacemesh.v1.SyncStartResponse.prototype.getStatus = function() {
  return /** @type{?proto.google.rpc.Status} */ (
    jspb.Message.getWrapperField(this, google_rpc_status_pb.Status, 1));
};


/** @param {?proto.google.rpc.Status|undefined} value */
proto.spacemesh.v1.SyncStartResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.SyncStartResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.SyncStartResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.ShutdownRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.ShutdownRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.ShutdownRequest.displayName = 'proto.spacemesh.v1.ShutdownRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.ShutdownRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.ShutdownRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.ShutdownRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.ShutdownRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.ShutdownRequest}
 */
proto.spacemesh.v1.ShutdownRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.ShutdownRequest;
  return proto.spacemesh.v1.ShutdownRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.ShutdownRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.ShutdownRequest}
 */
proto.spacemesh.v1.ShutdownRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.ShutdownRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.ShutdownRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.ShutdownRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.ShutdownRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.ShutdownResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.ShutdownResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.ShutdownResponse.displayName = 'proto.spacemesh.v1.ShutdownResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.ShutdownResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.ShutdownResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.ShutdownResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.ShutdownResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && google_rpc_status_pb.Status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.ShutdownResponse}
 */
proto.spacemesh.v1.ShutdownResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.ShutdownResponse;
  return proto.spacemesh.v1.ShutdownResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.ShutdownResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.ShutdownResponse}
 */
proto.spacemesh.v1.ShutdownResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_rpc_status_pb.Status;
      reader.readMessage(value,google_rpc_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.ShutdownResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.ShutdownResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.ShutdownResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.ShutdownResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_rpc_status_pb.Status.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.rpc.Status status = 1;
 * @return {?proto.google.rpc.Status}
 */
proto.spacemesh.v1.ShutdownResponse.prototype.getStatus = function() {
  return /** @type{?proto.google.rpc.Status} */ (
    jspb.Message.getWrapperField(this, google_rpc_status_pb.Status, 1));
};


/** @param {?proto.google.rpc.Status|undefined} value */
proto.spacemesh.v1.ShutdownResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.ShutdownResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.ShutdownResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.NodeStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.NodeStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.NodeStatus.displayName = 'proto.spacemesh.v1.NodeStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.NodeStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.NodeStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.NodeStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.NodeStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectedPeers: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isSynced: jspb.Message.getFieldWithDefault(msg, 2, false),
    syncedLayer: (f = msg.getSyncedLayer()) && types_pb.LayerNumber.toObject(includeInstance, f),
    topLayer: (f = msg.getTopLayer()) && types_pb.LayerNumber.toObject(includeInstance, f),
    verifiedLayer: (f = msg.getVerifiedLayer()) && types_pb.LayerNumber.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.NodeStatus}
 */
proto.spacemesh.v1.NodeStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.NodeStatus;
  return proto.spacemesh.v1.NodeStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.NodeStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.NodeStatus}
 */
proto.spacemesh.v1.NodeStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setConnectedPeers(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSynced(value);
      break;
    case 3:
      var value = new types_pb.LayerNumber;
      reader.readMessage(value,types_pb.LayerNumber.deserializeBinaryFromReader);
      msg.setSyncedLayer(value);
      break;
    case 4:
      var value = new types_pb.LayerNumber;
      reader.readMessage(value,types_pb.LayerNumber.deserializeBinaryFromReader);
      msg.setTopLayer(value);
      break;
    case 5:
      var value = new types_pb.LayerNumber;
      reader.readMessage(value,types_pb.LayerNumber.deserializeBinaryFromReader);
      msg.setVerifiedLayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.NodeStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.NodeStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.NodeStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.NodeStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectedPeers();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getIsSynced();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getSyncedLayer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      types_pb.LayerNumber.serializeBinaryToWriter
    );
  }
  f = message.getTopLayer();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      types_pb.LayerNumber.serializeBinaryToWriter
    );
  }
  f = message.getVerifiedLayer();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      types_pb.LayerNumber.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 connected_peers = 1;
 * @return {number}
 */
proto.spacemesh.v1.NodeStatus.prototype.getConnectedPeers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.spacemesh.v1.NodeStatus.prototype.setConnectedPeers = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool is_synced = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.spacemesh.v1.NodeStatus.prototype.getIsSynced = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.spacemesh.v1.NodeStatus.prototype.setIsSynced = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional LayerNumber synced_layer = 3;
 * @return {?proto.spacemesh.v1.LayerNumber}
 */
proto.spacemesh.v1.NodeStatus.prototype.getSyncedLayer = function() {
  return /** @type{?proto.spacemesh.v1.LayerNumber} */ (
    jspb.Message.getWrapperField(this, types_pb.LayerNumber, 3));
};


/** @param {?proto.spacemesh.v1.LayerNumber|undefined} value */
proto.spacemesh.v1.NodeStatus.prototype.setSyncedLayer = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.spacemesh.v1.NodeStatus.prototype.clearSyncedLayer = function() {
  this.setSyncedLayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.NodeStatus.prototype.hasSyncedLayer = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LayerNumber top_layer = 4;
 * @return {?proto.spacemesh.v1.LayerNumber}
 */
proto.spacemesh.v1.NodeStatus.prototype.getTopLayer = function() {
  return /** @type{?proto.spacemesh.v1.LayerNumber} */ (
    jspb.Message.getWrapperField(this, types_pb.LayerNumber, 4));
};


/** @param {?proto.spacemesh.v1.LayerNumber|undefined} value */
proto.spacemesh.v1.NodeStatus.prototype.setTopLayer = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.spacemesh.v1.NodeStatus.prototype.clearTopLayer = function() {
  this.setTopLayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.NodeStatus.prototype.hasTopLayer = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional LayerNumber verified_layer = 5;
 * @return {?proto.spacemesh.v1.LayerNumber}
 */
proto.spacemesh.v1.NodeStatus.prototype.getVerifiedLayer = function() {
  return /** @type{?proto.spacemesh.v1.LayerNumber} */ (
    jspb.Message.getWrapperField(this, types_pb.LayerNumber, 5));
};


/** @param {?proto.spacemesh.v1.LayerNumber|undefined} value */
proto.spacemesh.v1.NodeStatus.prototype.setVerifiedLayer = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.spacemesh.v1.NodeStatus.prototype.clearVerifiedLayer = function() {
  this.setVerifiedLayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.NodeStatus.prototype.hasVerifiedLayer = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.StatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.StatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.StatusRequest.displayName = 'proto.spacemesh.v1.StatusRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.StatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.StatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.StatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.StatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.StatusRequest}
 */
proto.spacemesh.v1.StatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.StatusRequest;
  return proto.spacemesh.v1.StatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.StatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.StatusRequest}
 */
proto.spacemesh.v1.StatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.StatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.StatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.StatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.StatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.StatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.StatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.StatusResponse.displayName = 'proto.spacemesh.v1.StatusResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.StatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.StatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.StatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.StatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.spacemesh.v1.NodeStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.StatusResponse}
 */
proto.spacemesh.v1.StatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.StatusResponse;
  return proto.spacemesh.v1.StatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.StatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.StatusResponse}
 */
proto.spacemesh.v1.StatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spacemesh.v1.NodeStatus;
      reader.readMessage(value,proto.spacemesh.v1.NodeStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.StatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.StatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.StatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.StatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.spacemesh.v1.NodeStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional NodeStatus status = 1;
 * @return {?proto.spacemesh.v1.NodeStatus}
 */
proto.spacemesh.v1.StatusResponse.prototype.getStatus = function() {
  return /** @type{?proto.spacemesh.v1.NodeStatus} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.NodeStatus, 1));
};


/** @param {?proto.spacemesh.v1.NodeStatus|undefined} value */
proto.spacemesh.v1.StatusResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.StatusResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.StatusResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.StatusStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.StatusStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.StatusStreamRequest.displayName = 'proto.spacemesh.v1.StatusStreamRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.StatusStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.StatusStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.StatusStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.StatusStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.StatusStreamRequest}
 */
proto.spacemesh.v1.StatusStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.StatusStreamRequest;
  return proto.spacemesh.v1.StatusStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.StatusStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.StatusStreamRequest}
 */
proto.spacemesh.v1.StatusStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.StatusStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.StatusStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.StatusStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.StatusStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.StatusStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.StatusStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.StatusStreamResponse.displayName = 'proto.spacemesh.v1.StatusStreamResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.StatusStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.StatusStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.StatusStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.StatusStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.spacemesh.v1.NodeStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.StatusStreamResponse}
 */
proto.spacemesh.v1.StatusStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.StatusStreamResponse;
  return proto.spacemesh.v1.StatusStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.StatusStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.StatusStreamResponse}
 */
proto.spacemesh.v1.StatusStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spacemesh.v1.NodeStatus;
      reader.readMessage(value,proto.spacemesh.v1.NodeStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.StatusStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.StatusStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.StatusStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.StatusStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.spacemesh.v1.NodeStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional NodeStatus status = 1;
 * @return {?proto.spacemesh.v1.NodeStatus}
 */
proto.spacemesh.v1.StatusStreamResponse.prototype.getStatus = function() {
  return /** @type{?proto.spacemesh.v1.NodeStatus} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.NodeStatus, 1));
};


/** @param {?proto.spacemesh.v1.NodeStatus|undefined} value */
proto.spacemesh.v1.StatusStreamResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.StatusStreamResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.StatusStreamResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.NodeError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.NodeError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.NodeError.displayName = 'proto.spacemesh.v1.NodeError';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.NodeError.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.NodeError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.NodeError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.NodeError.toObject = function(includeInstance, msg) {
  var f, obj = {
    level: jspb.Message.getFieldWithDefault(msg, 1, 0),
    module: jspb.Message.getFieldWithDefault(msg, 2, ""),
    msg: jspb.Message.getFieldWithDefault(msg, 3, ""),
    stackTrace: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.NodeError}
 */
proto.spacemesh.v1.NodeError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.NodeError;
  return proto.spacemesh.v1.NodeError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.NodeError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.NodeError}
 */
proto.spacemesh.v1.NodeError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.spacemesh.v1.LogLevel} */ (reader.readEnum());
      msg.setLevel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setModule(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStackTrace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.NodeError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.NodeError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.NodeError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.NodeError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getModule();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStackTrace();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional LogLevel level = 1;
 * @return {!proto.spacemesh.v1.LogLevel}
 */
proto.spacemesh.v1.NodeError.prototype.getLevel = function() {
  return /** @type {!proto.spacemesh.v1.LogLevel} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.spacemesh.v1.LogLevel} value */
proto.spacemesh.v1.NodeError.prototype.setLevel = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string module = 2;
 * @return {string}
 */
proto.spacemesh.v1.NodeError.prototype.getModule = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.spacemesh.v1.NodeError.prototype.setModule = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string msg = 3;
 * @return {string}
 */
proto.spacemesh.v1.NodeError.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.spacemesh.v1.NodeError.prototype.setMsg = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string stack_trace = 4;
 * @return {string}
 */
proto.spacemesh.v1.NodeError.prototype.getStackTrace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.spacemesh.v1.NodeError.prototype.setStackTrace = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.ErrorStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.ErrorStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.ErrorStreamRequest.displayName = 'proto.spacemesh.v1.ErrorStreamRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.ErrorStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.ErrorStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.ErrorStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.ErrorStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.ErrorStreamRequest}
 */
proto.spacemesh.v1.ErrorStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.ErrorStreamRequest;
  return proto.spacemesh.v1.ErrorStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.ErrorStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.ErrorStreamRequest}
 */
proto.spacemesh.v1.ErrorStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.ErrorStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.ErrorStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.ErrorStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.ErrorStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.ErrorStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.ErrorStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.spacemesh.v1.ErrorStreamResponse.displayName = 'proto.spacemesh.v1.ErrorStreamResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.ErrorStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.ErrorStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.ErrorStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.ErrorStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.spacemesh.v1.NodeError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.ErrorStreamResponse}
 */
proto.spacemesh.v1.ErrorStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.ErrorStreamResponse;
  return proto.spacemesh.v1.ErrorStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.ErrorStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.ErrorStreamResponse}
 */
proto.spacemesh.v1.ErrorStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spacemesh.v1.NodeError;
      reader.readMessage(value,proto.spacemesh.v1.NodeError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.ErrorStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.ErrorStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.ErrorStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.ErrorStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.spacemesh.v1.NodeError.serializeBinaryToWriter
    );
  }
};


/**
 * optional NodeError error = 1;
 * @return {?proto.spacemesh.v1.NodeError}
 */
proto.spacemesh.v1.ErrorStreamResponse.prototype.getError = function() {
  return /** @type{?proto.spacemesh.v1.NodeError} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.NodeError, 1));
};


/** @param {?proto.spacemesh.v1.NodeError|undefined} value */
proto.spacemesh.v1.ErrorStreamResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.spacemesh.v1.ErrorStreamResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.spacemesh.v1.ErrorStreamResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.spacemesh.v1.LogLevel = {
  LOG_LEVEL_UNSPECIFIED: 0,
  LOG_LEVEL_DEBUG: 1,
  LOG_LEVEL_INFO: 2,
  LOG_LEVEL_WARN: 3,
  LOG_LEVEL_ERROR: 4,
  LOG_LEVEL_DPANIC: 5,
  LOG_LEVEL_PANIC: 6,
  LOG_LEVEL_FATAL: 7
};

goog.object.extend(exports, proto.spacemesh.v1);
